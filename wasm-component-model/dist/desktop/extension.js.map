{
  "version": 3,
  "sources": ["../../node_modules/@vscode/wasm-component-model/lib/common/ral.js", "../../node_modules/@vscode/wasm-component-model/lib/node/ril.js", "../../node_modules/uuid/dist/esm-node/rng.js", "../../node_modules/uuid/dist/esm-node/regex.js", "../../node_modules/uuid/dist/esm-node/validate.js", "../../node_modules/uuid/dist/esm-node/stringify.js", "../../node_modules/uuid/dist/esm-node/v1.js", "../../node_modules/uuid/dist/esm-node/parse.js", "../../node_modules/uuid/dist/esm-node/v35.js", "../../node_modules/uuid/dist/esm-node/md5.js", "../../node_modules/uuid/dist/esm-node/v3.js", "../../node_modules/uuid/dist/esm-node/native.js", "../../node_modules/uuid/dist/esm-node/v4.js", "../../node_modules/uuid/dist/esm-node/sha1.js", "../../node_modules/uuid/dist/esm-node/v5.js", "../../node_modules/uuid/dist/esm-node/nil.js", "../../node_modules/uuid/dist/esm-node/version.js", "../../node_modules/uuid/dist/esm-node/index.js", "../../node_modules/@vscode/wasm-component-model/lib/common/componentModel.js", "../../node_modules/@vscode/wasm-component-model/lib/common/api.js", "../../node_modules/@vscode/wasm-component-model/lib/node/main.js", "../../src/extension.ts", "../../src/example.ts"],
  "sourcesContent": ["\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet _ral;\nfunction RAL() {\n    if (_ral === undefined) {\n        throw new Error(`No runtime abstraction layer installed`);\n    }\n    return _ral;\n}\n(function (RAL) {\n    function install(ral) {\n        if (ral === undefined) {\n            throw new Error(`No runtime abstraction layer provided`);\n        }\n        _ral = ral;\n    }\n    RAL.install = install;\n    function isInstalled() {\n        return _ral !== undefined;\n    }\n    RAL.isInstalled = isInstalled;\n})(RAL || (RAL = {}));\nexports.default = RAL;\n", "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nconst util_1 = require(\"util\");\nconst ral_1 = __importDefault(require(\"../common/ral\"));\nconst _ril = Object.freeze({\n    TextEncoder: Object.freeze({\n        create(encoding = 'utf-8') {\n            return {\n                encode(input) {\n                    return Buffer.from(input ?? '', encoding);\n                }\n            };\n        }\n    }),\n    TextDecoder: Object.freeze({\n        create(encoding = 'utf-8') {\n            return new util_1.TextDecoder(encoding);\n        }\n    }),\n    console: console,\n    timer: Object.freeze({\n        setTimeout(callback, ms, ...args) {\n            const handle = setTimeout(callback, ms, ...args);\n            return { dispose: () => clearTimeout(handle) };\n        },\n        setImmediate(callback, ...args) {\n            const handle = setImmediate(callback, ...args);\n            return { dispose: () => clearImmediate(handle) };\n        },\n        setInterval(callback, ms, ...args) {\n            const handle = setInterval(callback, ms, ...args);\n            return { dispose: () => clearInterval(handle) };\n        }\n    })\n});\nfunction RIL() {\n    return _ril;\n}\n(function (RIL) {\n    function install() {\n        if (!ral_1.default.isInstalled()) {\n            ral_1.default.install(_ril);\n        }\n    }\n    RIL.install = install;\n})(RIL || (RIL = {}));\nif (!ral_1.default.isInstalled()) {\n    ral_1.default.install(_ril);\n}\nexports.default = RIL;\n", "import crypto from 'crypto';\nconst rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate\n\nlet poolPtr = rnds8Pool.length;\nexport default function rng() {\n  if (poolPtr > rnds8Pool.length - 16) {\n    crypto.randomFillSync(rnds8Pool);\n    poolPtr = 0;\n  }\n\n  return rnds8Pool.slice(poolPtr, poolPtr += 16);\n}", "export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;", "import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;", "import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;", "import rng from './rng.js';\nimport { unsafeStringify } from './stringify.js'; // **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nlet _nodeId;\n\nlet _clockseq; // Previous uuid creation time\n\n\nlet _lastMSecs = 0;\nlet _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  let i = buf && offset || 0;\n  const b = buf || new Array(16);\n  options = options || {};\n  let node = options.node || _nodeId;\n  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not\n  // specified.  We do this lazily to minimize issues related to insufficient\n  // system entropy.  See #189\n\n  if (node == null || clockseq == null) {\n    const seedBytes = options.random || (options.rng || rng)();\n\n    if (node == null) {\n      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n    }\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n    }\n  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (let n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || unsafeStringify(b);\n}\n\nexport default v1;", "import validate from './validate.js';\n\nfunction parse(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  let v;\n  const arr = new Uint8Array(16); // Parse ########-....-....-....-............\n\n  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;\n  arr[1] = v >>> 16 & 0xff;\n  arr[2] = v >>> 8 & 0xff;\n  arr[3] = v & 0xff; // Parse ........-####-....-....-............\n\n  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff; // Parse ........-....-####-....-............\n\n  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff; // Parse ........-....-....-####-............\n\n  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff; // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n\n  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;\n  arr[11] = v / 0x100000000 & 0xff;\n  arr[12] = v >>> 24 & 0xff;\n  arr[13] = v >>> 16 & 0xff;\n  arr[14] = v >>> 8 & 0xff;\n  arr[15] = v & 0xff;\n  return arr;\n}\n\nexport default parse;", "import { unsafeStringify } from './stringify.js';\nimport parse from './parse.js';\n\nfunction stringToBytes(str) {\n  str = unescape(encodeURIComponent(str)); // UTF8 escape\n\n  const bytes = [];\n\n  for (let i = 0; i < str.length; ++i) {\n    bytes.push(str.charCodeAt(i));\n  }\n\n  return bytes;\n}\n\nexport const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';\nexport const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';\nexport default function v35(name, version, hashfunc) {\n  function generateUUID(value, namespace, buf, offset) {\n    var _namespace;\n\n    if (typeof value === 'string') {\n      value = stringToBytes(value);\n    }\n\n    if (typeof namespace === 'string') {\n      namespace = parse(namespace);\n    }\n\n    if (((_namespace = namespace) === null || _namespace === void 0 ? void 0 : _namespace.length) !== 16) {\n      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');\n    } // Compute hash of namespace and value, Per 4.3\n    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =\n    // hashfunc([...namespace, ... value])`\n\n\n    let bytes = new Uint8Array(16 + value.length);\n    bytes.set(namespace);\n    bytes.set(value, namespace.length);\n    bytes = hashfunc(bytes);\n    bytes[6] = bytes[6] & 0x0f | version;\n    bytes[8] = bytes[8] & 0x3f | 0x80;\n\n    if (buf) {\n      offset = offset || 0;\n\n      for (let i = 0; i < 16; ++i) {\n        buf[offset + i] = bytes[i];\n      }\n\n      return buf;\n    }\n\n    return unsafeStringify(bytes);\n  } // Function#name is not settable on some platforms (#270)\n\n\n  try {\n    generateUUID.name = name; // eslint-disable-next-line no-empty\n  } catch (err) {} // For CommonJS default export support\n\n\n  generateUUID.DNS = DNS;\n  generateUUID.URL = URL;\n  return generateUUID;\n}", "import crypto from 'crypto';\n\nfunction md5(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n\n  return crypto.createHash('md5').update(bytes).digest();\n}\n\nexport default md5;", "import v35 from './v35.js';\nimport md5 from './md5.js';\nconst v3 = v35('v3', 0x30, md5);\nexport default v3;", "import crypto from 'crypto';\nexport default {\n  randomUUID: crypto.randomUUID\n};", "import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;", "import crypto from 'crypto';\n\nfunction sha1(bytes) {\n  if (Array.isArray(bytes)) {\n    bytes = Buffer.from(bytes);\n  } else if (typeof bytes === 'string') {\n    bytes = Buffer.from(bytes, 'utf8');\n  }\n\n  return crypto.createHash('sha1').update(bytes).digest();\n}\n\nexport default sha1;", "import v35 from './v35.js';\nimport sha1 from './sha1.js';\nconst v5 = v35('v5', 0x50, sha1);\nexport default v5;", "export default '00000000-0000-0000-0000-000000000000';", "import validate from './validate.js';\n\nfunction version(uuid) {\n  if (!validate(uuid)) {\n    throw TypeError('Invalid UUID');\n  }\n\n  return parseInt(uuid.slice(14, 15), 16);\n}\n\nexport default version;", "export { default as v1 } from './v1.js';\nexport { default as v3 } from './v3.js';\nexport { default as v4 } from './v4.js';\nexport { default as v5 } from './v5.js';\nexport { default as NIL } from './nil.js';\nexport { default as version } from './version.js';\nexport { default as validate } from './validate.js';\nexport { default as stringify } from './stringify.js';\nexport { default as parse } from './parse.js';", "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OptionType = exports.option = exports.EnumType = exports.VariantType = exports.FlagsType = exports.TupleType = exports.RecordType = exports.Float64ArrayType = exports.Float32ArrayType = exports.BigUint64ArrayType = exports.Uint32ArrayType = exports.Uint16ArrayType = exports.Uint8ArrayType = exports.BigInt64ArrayType = exports.Int32ArrayType = exports.Int16ArrayType = exports.Int8ArrayType = exports.ListType = exports.wstring = exports.wchar = exports.ptr = exports.size = exports.byte = exports.float64 = exports.float32 = exports.s64 = exports.s32 = exports.s16 = exports.s8 = exports.u64 = exports.u32 = exports.u16 = exports.u8 = exports.bool = exports.ComponentModelTypeKind = exports.FlatTuple = exports.f64 = exports.f32 = exports.i64 = exports.i32 = exports.FlatTypeKind = exports.Memory = exports.MemoryRange = exports.ReadonlyMemoryRange = exports.BaseMemoryRange = exports.MemoryError = exports.Alignment = exports.ResourceManagers = exports.ResourceManager = exports.ComponentModelTrap = void 0;\nexports.Exports = exports.Module = exports.Imports = exports.Resource = exports.WasmContext = exports.PackageType = exports.InterfaceType = exports.ComponentModelTypeVisitor = exports.OwnType = exports.BorrowType = exports.ResourceType = exports.ResourceHandleType = exports.MethodType = exports.StaticMethodType = exports.DestructorType = exports.ConstructorType = exports.FunctionType = exports.ResultType = exports.result = void 0;\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nconst ral_1 = __importDefault(require(\"./ral\"));\nconst uuid = __importStar(require(\"uuid\"));\n// Type arrays are store either little or big endian depending on the platform.\n// The component model requires little endian so we throw for now if the platform\n// is big endian. We can alternatively use data views in type arrays component\n// model types to support big endian platforms\nconst isLittleEndian = new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;\nif (!isLittleEndian) {\n    throw new Error('Big endian platforms are currently not supported.');\n}\nclass ComponentModelTrap extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nexports.ComponentModelTrap = ComponentModelTrap;\nvar ResourceManager;\n(function (ResourceManager) {\n    function from(obj) {\n        while (obj !== undefined) {\n            const self = obj;\n            if (typeof self.$drop === 'function' && typeof self.$handle === 'function' && typeof self.$resource === 'function') {\n                return self;\n            }\n            obj = obj.$manager;\n        }\n        return undefined;\n    }\n    ResourceManager.from = from;\n    class Default {\n        h2r;\n        handleCounter;\n        constructor() {\n            this.h2r = new Map();\n            this.handleCounter = 1;\n        }\n        $handle(value) {\n            if (value.$handle !== undefined) {\n                return value.$handle;\n            }\n            const handle = this.handleCounter++;\n            this.h2r.set(handle, value);\n            value.$handle = handle;\n            return handle;\n        }\n        $resource(resource) {\n            const value = this.h2r.get(resource);\n            if (value === undefined) {\n                throw new ComponentModelTrap(`Unknown resource handle ${resource}`);\n            }\n            return value;\n        }\n        $drop(resource) {\n            this.h2r.delete(resource);\n        }\n    }\n    ResourceManager.Default = Default;\n})(ResourceManager || (exports.ResourceManager = ResourceManager = {}));\nvar ResourceManagers;\n(function (ResourceManagers) {\n    class Default {\n        managers;\n        constructor() {\n            this.managers = new Map();\n        }\n        has(id) {\n            return this.managers.has(id);\n        }\n        set(id, manager) {\n            if (this.managers.has(id)) {\n                throw new ComponentModelTrap(`Resource manager ${id} already registered.`);\n            }\n            this.managers.set(id, manager);\n        }\n        get(id) {\n            const manager = this.managers.get(id);\n            if (manager === undefined) {\n                throw new ComponentModelTrap(`Resource manager ${id} not found.`);\n            }\n            return manager;\n        }\n    }\n    ResourceManagers.Default = Default;\n})(ResourceManagers || (exports.ResourceManagers = ResourceManagers = {}));\nvar BigInts;\n(function (BigInts) {\n    const MAX_VALUE_AS_BIGINT = BigInt(Number.MAX_VALUE);\n    function asNumber(value) {\n        if (value > MAX_VALUE_AS_BIGINT) {\n            throw new ComponentModelTrap('Value too big for number');\n        }\n        return Number(value);\n    }\n    BigInts.asNumber = asNumber;\n    function max(...args) {\n        return args.reduce((m, e) => e > m ? e : m);\n    }\n    BigInts.max = max;\n    function min(...args) {\n        return args.reduce((m, e) => e < m ? e : m);\n    }\n    BigInts.min = min;\n})(BigInts || (BigInts = {}));\nconst utf8Decoder = (0, ral_1.default)().TextDecoder.create('utf-8');\nconst utf8Encoder = (0, ral_1.default)().TextEncoder.create('utf-8');\nvar Alignment;\n(function (Alignment) {\n    Alignment[Alignment[\"byte\"] = 1] = \"byte\";\n    Alignment[Alignment[\"halfWord\"] = 2] = \"halfWord\";\n    Alignment[Alignment[\"word\"] = 4] = \"word\";\n    Alignment[Alignment[\"doubleWord\"] = 8] = \"doubleWord\";\n})(Alignment || (exports.Alignment = Alignment = {}));\n(function (Alignment) {\n    function align(ptr, alignment) {\n        return Math.ceil(ptr / alignment) * alignment;\n    }\n    Alignment.align = align;\n    function getAlignment(ptr) {\n        if (ptr % Alignment.doubleWord === 0) {\n            return Alignment.doubleWord;\n        }\n        if (ptr % Alignment.word === 0) {\n            return Alignment.word;\n        }\n        if (ptr % Alignment.halfWord === 0) {\n            return Alignment.halfWord;\n        }\n        return Alignment.byte;\n    }\n    Alignment.getAlignment = getAlignment;\n})(Alignment || (exports.Alignment = Alignment = {}));\nconst align = Alignment.align;\nclass MemoryError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nexports.MemoryError = MemoryError;\nclass BaseMemoryRange {\n    _memory;\n    _ptr;\n    _size;\n    _alignment;\n    _view;\n    constructor(memory, ptr, size) {\n        this._memory = memory;\n        this._ptr = ptr;\n        this._size = size;\n        this._alignment = Alignment.getAlignment(ptr);\n    }\n    get memory() {\n        return this._memory;\n    }\n    get ptr() {\n        return this._ptr;\n    }\n    get size() {\n        return this._size;\n    }\n    get alignment() {\n        return this._alignment;\n    }\n    get view() {\n        if (this._view === undefined || this._view.buffer !== this._memory.buffer) {\n            this._view = new DataView(this._memory.buffer, this._ptr, this._size);\n        }\n        return this._view;\n    }\n    getUint8(offset) {\n        return this.view.getUint8(offset);\n    }\n    getInt8(offset) {\n        return this.view.getInt8(offset);\n    }\n    getUint16(offset) {\n        this.assertAlignment(offset, Alignment.halfWord);\n        return this.view.getUint16(offset, true);\n    }\n    getInt16(offset) {\n        this.assertAlignment(offset, Alignment.halfWord);\n        return this.view.getInt16(offset, true);\n    }\n    getUint32(offset) {\n        this.assertAlignment(offset, Alignment.word);\n        return this.view.getUint32(offset, true);\n    }\n    getInt32(offset) {\n        this.assertAlignment(offset, Alignment.word);\n        return this.view.getInt32(offset, true);\n    }\n    getUint64(offset) {\n        this.assertAlignment(offset, Alignment.doubleWord);\n        return this.view.getBigUint64(offset, true);\n    }\n    getInt64(offset) {\n        this.assertAlignment(offset, Alignment.doubleWord);\n        return this.view.getBigInt64(offset, true);\n    }\n    getFloat32(offset) {\n        this.assertAlignment(offset, Alignment.word);\n        return this.view.getFloat32(offset, true);\n    }\n    getFloat64(offset) {\n        this.assertAlignment(offset, Alignment.doubleWord);\n        return this.view.getFloat64(offset, true);\n    }\n    getPtr(offset) {\n        this.assertAlignment(offset, Alignment.word);\n        return this.view.getUint32(offset, true);\n    }\n    getUint8Array(offset, length) {\n        return this.getArray(offset, length, Uint8Array);\n    }\n    getInt8Array(offset, length) {\n        return this.getArray(offset, length, Int8Array);\n    }\n    getUint16Array(byteOffset, length) {\n        return this.getArray(byteOffset, length, Uint16Array);\n    }\n    getInt16Array(byteOffset, length) {\n        return this.getArray(byteOffset, length, Int16Array);\n    }\n    getUint32Array(byteOffset, length) {\n        return this.getArray(byteOffset, length, Uint32Array);\n    }\n    getInt32Array(byteOffset, length) {\n        return this.getArray(byteOffset, length, Int32Array);\n    }\n    getUint64Array(byteOffset, length) {\n        return this.getBigArray(byteOffset, length, BigUint64Array);\n    }\n    getInt64Array(byteOffset, length) {\n        return this.getBigArray(byteOffset, length, BigInt64Array);\n    }\n    getFloat32Array(byteOffset, length) {\n        return this.getArray(byteOffset, length, Float32Array);\n    }\n    getFloat64Array(byteOffset, length) {\n        return this.getArray(byteOffset, length, Float64Array);\n    }\n    copyBytes(offset, length, into, into_offset) {\n        if (offset + length > this.size) {\n            throw new MemoryError(`Memory access is out of bounds. Accessing [${offset}, ${length}], allocated[${this.ptr}, ${this.size}]`);\n        }\n        const target = into.getUint8View(into_offset, length);\n        target.set(new Uint8Array(this._memory.buffer, this.ptr + offset, length));\n    }\n    assertAlignment(offset, alignment) {\n        if (alignment > this.alignment || offset % alignment !== 0) {\n            throw new MemoryError(`Memory location is not aligned to ${alignment}. Allocated[${this.ptr},${this.size}]`);\n        }\n    }\n    getArray(byteOffset, length, clazz) {\n        length = length ?? (this.size - byteOffset) / clazz.BYTES_PER_ELEMENT;\n        if (!Number.isInteger(length)) {\n            throw new MemoryError(`Length must be an integer value. Got ${length}.`);\n        }\n        const result = new clazz(length);\n        result.set(new clazz(this._memory.buffer, this.ptr + byteOffset, length));\n        return result;\n    }\n    getBigArray(byteOffset, length, clazz) {\n        length = length ?? (this.size - byteOffset) / clazz.BYTES_PER_ELEMENT;\n        if (!Number.isInteger(length)) {\n            throw new MemoryError(`Length must be an integer value. Got ${length}.`);\n        }\n        const result = new clazz(length);\n        result.set(new clazz(this._memory.buffer, this.ptr + byteOffset, length));\n        return result;\n    }\n}\nexports.BaseMemoryRange = BaseMemoryRange;\nclass ReadonlyMemoryRange extends BaseMemoryRange {\n    constructor(memory, ptr, size) {\n        super(memory, ptr, size);\n    }\n    range(offset, size) {\n        if (offset + size > this.size) {\n            throw new MemoryError(`Memory access is out of bounds. Accessing [${offset}, ${size}], allocated[${this.ptr}, ${this.size}]`);\n        }\n        return new ReadonlyMemoryRange(this._memory, this.ptr + offset, size);\n    }\n}\nexports.ReadonlyMemoryRange = ReadonlyMemoryRange;\nclass MemoryRange extends BaseMemoryRange {\n    isAllocated;\n    constructor(memory, ptr, size, isPreallocated = false) {\n        super(memory, ptr, size);\n        this.isAllocated = isPreallocated;\n    }\n    free() {\n        if (typeof this._memory.free !== 'function') {\n            throw new MemoryError(`Memory doesn't support free`);\n        }\n        this._memory.free(this);\n    }\n    range(offset, size) {\n        if (offset + size > this.size) {\n            throw new MemoryError(`Memory access is out of bounds. Accessing [${offset}, ${size}], allocated[${this.ptr}, ${this.size}]`);\n        }\n        return new MemoryRange(this._memory, this.ptr + offset, size);\n    }\n    setUint8(offset, value) {\n        this.view.setUint8(offset, value);\n    }\n    setInt8(offset, value) {\n        this.view.setInt8(offset, value);\n    }\n    setUint16(offset, value) {\n        this.assertAlignment(offset, Alignment.halfWord);\n        this.view.setUint16(offset, value, true);\n    }\n    setInt16(offset, value) {\n        this.assertAlignment(offset, Alignment.halfWord);\n        this.view.setInt16(offset, value, true);\n    }\n    setUint32(offset, value) {\n        this.assertAlignment(offset, Alignment.word);\n        this.view.setUint32(offset, value, true);\n    }\n    setInt32(offset, value) {\n        this.assertAlignment(offset, Alignment.word);\n        this.view.setInt32(offset, value, true);\n    }\n    setUint64(offset, value) {\n        this.assertAlignment(offset, Alignment.doubleWord);\n        this.view.setBigUint64(offset, value, true);\n    }\n    setInt64(offset, value) {\n        this.assertAlignment(offset, Alignment.doubleWord);\n        this.view.setBigInt64(offset, value, true);\n    }\n    setFloat32(offset, value) {\n        this.assertAlignment(offset, Alignment.word);\n        this.view.setFloat32(offset, value, true);\n    }\n    setFloat64(offset, value) {\n        this.assertAlignment(offset, Alignment.doubleWord);\n        this.view.setFloat64(offset, value, true);\n    }\n    setPtr(offset, value) {\n        this.assertAlignment(offset, Alignment.word);\n        this.view.setUint32(offset, value, true);\n    }\n    getUint8View(offset, length) {\n        return this.getArrayView(offset, length, Uint8Array);\n    }\n    getInt8View(offset, length) {\n        return this.getArrayView(offset, length, Int8Array);\n    }\n    getUint16View(offset, length) {\n        return this.getArrayView(offset, length, Uint16Array);\n    }\n    getInt16View(offset, length) {\n        return this.getArrayView(offset, length, Int16Array);\n    }\n    getUint32View(offset, length) {\n        return this.getArrayView(offset, length, Uint32Array);\n    }\n    getInt32View(offset, length) {\n        return this.getArrayView(offset, length, Int32Array);\n    }\n    getUint64View(offset, length) {\n        return this.getBigArrayView(offset, length, BigUint64Array);\n    }\n    getInt64View(offset, length) {\n        return this.getBigArrayView(offset, length, BigInt64Array);\n    }\n    getFloat32View(offset, length) {\n        return this.getArrayView(offset, length, Float32Array);\n    }\n    getFloat64View(offset, length) {\n        return this.getArrayView(offset, length, Float64Array);\n    }\n    setUint8Array(offset, bytes) {\n        this.setArray(offset, bytes, Uint8Array);\n    }\n    setInt8Array(offset, bytes) {\n        this.setArray(offset, bytes, Int8Array);\n    }\n    setUint16Array(offset, bytes) {\n        this.setArray(offset, bytes, Uint16Array);\n    }\n    setInt16Array(offset, bytes) {\n        this.setArray(offset, bytes, Int16Array);\n    }\n    setUint32Array(offset, bytes) {\n        this.setArray(offset, bytes, Uint32Array);\n    }\n    setInt32Array(offset, bytes) {\n        this.setArray(offset, bytes, Int32Array);\n    }\n    setUint64Array(offset, bytes) {\n        this.setBigArray(offset, bytes, BigUint64Array);\n    }\n    setInt64Array(offset, bytes) {\n        this.setBigArray(offset, bytes, BigInt64Array);\n    }\n    setFloat32Array(offset, bytes) {\n        this.setArray(offset, bytes, Float32Array);\n    }\n    setFloat64Array(offset, bytes) {\n        this.setArray(offset, bytes, Float64Array);\n    }\n    getArrayView(byteOffset, length, clazz) {\n        length = length ?? (this.size - byteOffset) / clazz.BYTES_PER_ELEMENT;\n        if (!Number.isInteger(length)) {\n            throw new MemoryError(`Length must be an integer value. Got ${length}.`);\n        }\n        return new clazz(this._memory.buffer, this.ptr + byteOffset, length);\n    }\n    getBigArrayView(byteOffset, length, clazz) {\n        length = length ?? (this.size - byteOffset) / clazz.BYTES_PER_ELEMENT;\n        if (!Number.isInteger(length)) {\n            throw new MemoryError(`Length must be an integer value. Got ${length}.`);\n        }\n        return new clazz(this._memory.buffer, this.ptr + byteOffset, length);\n    }\n    setArray(byteOffset, bytes, clazz) {\n        new clazz(this._memory.buffer, this.ptr + byteOffset, bytes.length).set(bytes);\n    }\n    setBigArray(byteOffset, bytes, clazz) {\n        new clazz(this._memory.buffer, this.ptr + byteOffset, bytes.length).set(bytes);\n    }\n}\nexports.MemoryRange = MemoryRange;\n/**\n * A memory of size 0. Doesn't allow any kind of operation on it.\n */\nclass NullMemory {\n    id = 'b60336d2-c856-4767-af3b-f66e1ab6c507';\n    buffer = new ArrayBuffer(0);\n    alloc() {\n        throw new MemoryError('Cannot allocate memory on a null memory.');\n    }\n    realloc() {\n        throw new MemoryError('Cannot re-allocate memory on a null memory.');\n    }\n    preAllocated() {\n        throw new MemoryError('Cannot point to pre-allocate memory on a null memory.');\n    }\n    readonly() {\n        throw new MemoryError('Cannot point to readonly memory on a null memory.');\n    }\n    free() {\n        throw new MemoryError('Cannot free memory on a null memory.');\n    }\n}\nvar Memory;\n(function (Memory) {\n    Memory.Null = new NullMemory();\n    class Default {\n        id;\n        memory;\n        cabi_realloc;\n        constructor(exports, id) {\n            if (exports.memory === undefined || exports.cabi_realloc === undefined) {\n                throw new MemoryError('The exports object must contain a memory object and a cabi_realloc function.');\n            }\n            this.id = id ?? uuid.v4();\n            this.memory = exports.memory;\n            this.cabi_realloc = exports.cabi_realloc;\n        }\n        get buffer() {\n            return this.memory.buffer;\n        }\n        alloc(align, size) {\n            const ptr = this.cabi_realloc(0, 0, align, size);\n            return new MemoryRange(this, ptr, size);\n        }\n        realloc(range, newSize) {\n            const ptr = this.cabi_realloc(range.ptr, range.size, range.alignment, newSize);\n            return new MemoryRange(this, ptr, newSize);\n        }\n        preAllocated(ptr, size) {\n            return new MemoryRange(this, ptr, size);\n        }\n        readonly(ptr, size) {\n            return new ReadonlyMemoryRange(this, ptr, size);\n        }\n    }\n    Memory.Default = Default;\n})(Memory || (exports.Memory = Memory = {}));\nvar FlatTypeKind;\n(function (FlatTypeKind) {\n    FlatTypeKind[\"i32\"] = \"i32\";\n    FlatTypeKind[\"i64\"] = \"i64\";\n    FlatTypeKind[\"f32\"] = \"f32\";\n    FlatTypeKind[\"f64\"] = \"f64\";\n})(FlatTypeKind || (exports.FlatTypeKind = FlatTypeKind = {}));\nvar $i32;\n(function ($i32) {\n    $i32.kind = FlatTypeKind.i32;\n    $i32.size = 4;\n    $i32.alignment = Alignment.word;\n    function load(memory, offset) {\n        return memory.getUint32(offset);\n    }\n    $i32.load = load;\n    function store(memory, offset, value) {\n        memory.setUint32(offset, value);\n    }\n    $i32.store = store;\n    function copy(dest, dest_offset, src, src_offset) {\n        dest.assertAlignment(dest_offset, $i32.alignment);\n        src.assertAlignment(src_offset, $i32.alignment);\n        src.copyBytes(src_offset, $i32.size, dest, dest_offset);\n    }\n    $i32.copy = copy;\n})($i32 || ($i32 = {}));\nexports.i32 = $i32;\nvar $i64;\n(function ($i64) {\n    $i64.kind = FlatTypeKind.i64;\n    $i64.size = 8;\n    $i64.alignment = Alignment.doubleWord;\n    function load(memory, offset) {\n        return memory.getUint64(offset);\n    }\n    $i64.load = load;\n    function store(memory, offset, value) {\n        memory.setUint64(offset, value);\n    }\n    $i64.store = store;\n    function copy(dest, dest_offset, src, src_offset) {\n        dest.assertAlignment(dest_offset, $i64.alignment);\n        src.assertAlignment(src_offset, $i64.alignment);\n        src.copyBytes(src_offset, $i64.size, dest, dest_offset);\n    }\n    $i64.copy = copy;\n})($i64 || ($i64 = {}));\nexports.i64 = $i64;\nvar $f32;\n(function ($f32) {\n    $f32.kind = FlatTypeKind.f32;\n    $f32.size = 4;\n    $f32.alignment = Alignment.word;\n    function load(memory, offset) {\n        return memory.getFloat32(offset);\n    }\n    $f32.load = load;\n    function store(memory, offset, value) {\n        memory.setFloat32(offset, value);\n    }\n    $f32.store = store;\n    function copy(dest, dest_offset, src, src_offset) {\n        dest.assertAlignment(dest_offset, $f32.alignment);\n        src.assertAlignment(src_offset, $f32.alignment);\n        src.copyBytes(src_offset, $f32.size, dest, dest_offset);\n    }\n    $f32.copy = copy;\n})($f32 || ($f32 = {}));\nexports.f32 = $f32;\nvar $f64;\n(function ($f64) {\n    $f64.kind = FlatTypeKind.f64;\n    $f64.size = 8;\n    $f64.alignment = Alignment.doubleWord;\n    function load(memory, offset) {\n        return memory.getFloat64(offset);\n    }\n    $f64.load = load;\n    function store(memory, offset, value) {\n        memory.setFloat64(offset, value);\n    }\n    $f64.store = store;\n    function copy(dest, dest_offset, src, src_offset) {\n        dest.assertAlignment(dest_offset, $f64.alignment);\n        src.assertAlignment(src_offset, $f64.alignment);\n        src.copyBytes(src_offset, $f64.size, dest, dest_offset);\n    }\n    $f64.copy = copy;\n})($f64 || ($f64 = {}));\nexports.f64 = $f64;\nclass FlatTuple {\n    types;\n    alignment;\n    size;\n    constructor(types) {\n        this.types = types;\n        this.alignment = FlatTuple.alignment(types);\n        this.size = FlatTuple.size(types, this.alignment);\n    }\n    load(memory, offset) {\n        memory.assertAlignment(offset, this.alignment);\n        const result = [];\n        for (const type of this.types) {\n            offset = align(offset, type.alignment);\n            result.push(type.load(memory, offset));\n            offset += type.size;\n        }\n        return result;\n    }\n    alloc(memory) {\n        return memory.alloc(this.alignment, this.size);\n    }\n    store(memory, offset, values) {\n        memory.assertAlignment(offset, this.alignment);\n        for (const [index, type] of this.types.entries()) {\n            const value = values[index];\n            offset = align(offset, type.alignment);\n            type.store(memory, offset, value);\n            offset += type.size;\n        }\n    }\n    copy(dest, dest_offset, src, src_offset) {\n        dest.assertAlignment(dest_offset, this.alignment);\n        src.assertAlignment(src_offset, this.alignment);\n        src.copyBytes(src_offset, this.size, dest, dest_offset);\n    }\n    static alignment(types) {\n        let result = Alignment.byte;\n        for (const type of types) {\n            result = Math.max(result, type.alignment);\n        }\n        return result;\n    }\n    static size(types, tupleAlignment) {\n        let result = 0;\n        for (const type of types) {\n            result = align(result, type.alignment);\n            result += type.size;\n        }\n        return align(result, tupleAlignment);\n    }\n}\nexports.FlatTuple = FlatTuple;\nvar WasmTypes;\n(function (WasmTypes) {\n    const $32 = new DataView(new ArrayBuffer(4));\n    const $64 = new DataView(new ArrayBuffer(8));\n    function reinterpret_i32_as_f32(i32) {\n        $32.setInt32(0, i32, true);\n        return $32.getFloat32(0, true);\n    }\n    WasmTypes.reinterpret_i32_as_f32 = reinterpret_i32_as_f32;\n    function reinterpret_f32_as_i32(f32) {\n        $32.setFloat32(0, f32, true);\n        return $32.getInt32(0, true);\n    }\n    WasmTypes.reinterpret_f32_as_i32 = reinterpret_f32_as_i32;\n    function convert_i64_to_i32(i64) {\n        return BigInts.asNumber(i64);\n    }\n    WasmTypes.convert_i64_to_i32 = convert_i64_to_i32;\n    function convert_i32_to_i64(i32) {\n        return BigInt(i32);\n    }\n    WasmTypes.convert_i32_to_i64 = convert_i32_to_i64;\n    function reinterpret_i64_as_f32(i64) {\n        const i32 = convert_i64_to_i32(i64);\n        return reinterpret_i32_as_f32(i32);\n    }\n    WasmTypes.reinterpret_i64_as_f32 = reinterpret_i64_as_f32;\n    function reinterpret_f32_as_i64(f32) {\n        const i32 = reinterpret_f32_as_i32(f32);\n        return convert_i32_to_i64(i32);\n    }\n    WasmTypes.reinterpret_f32_as_i64 = reinterpret_f32_as_i64;\n    function reinterpret_i64_as_f64(i64) {\n        $64.setBigInt64(0, i64, true);\n        return $64.getFloat64(0, true);\n    }\n    WasmTypes.reinterpret_i64_as_f64 = reinterpret_i64_as_f64;\n    function reinterpret_f64_as_i64(f64) {\n        $64.setFloat64(0, f64, true);\n        return $64.getBigInt64(0, true);\n    }\n    WasmTypes.reinterpret_f64_as_i64 = reinterpret_f64_as_i64;\n})(WasmTypes || (WasmTypes = {}));\nclass CoerceValueIter {\n    values;\n    haveFlatTypes;\n    wantFlatTypes;\n    index;\n    constructor(values, haveFlatTypes, wantFlatTypes) {\n        this.values = values;\n        this.haveFlatTypes = haveFlatTypes;\n        this.wantFlatTypes = wantFlatTypes;\n        if (haveFlatTypes.length < wantFlatTypes.length) {\n            throw new ComponentModelTrap(`Invalid coercion: have ${haveFlatTypes.length} values, want ${wantFlatTypes.length} values`);\n        }\n        this.index = 0;\n    }\n    next() {\n        const value = this.values.next();\n        if (value.done) {\n            return value;\n        }\n        const haveType = this.haveFlatTypes[this.index];\n        const wantType = this.wantFlatTypes[this.index++];\n        if (haveType === $i32 && wantType === $f32) {\n            return { done: false, value: WasmTypes.reinterpret_i32_as_f32(value.value) };\n        }\n        else if (haveType === $i64 && wantType === $i32) {\n            return { done: false, value: WasmTypes.convert_i64_to_i32(value.value) };\n        }\n        else if (haveType === $i64 && wantType === $f32) {\n            return { done: false, value: WasmTypes.reinterpret_i64_as_f32(value.value) };\n        }\n        else if (haveType === $i64 && wantType === $f64) {\n            return { done: false, value: WasmTypes.reinterpret_i64_as_f64(value.value) };\n        }\n        else {\n            return value;\n        }\n    }\n}\nvar ComponentModelTypeKind;\n(function (ComponentModelTypeKind) {\n    ComponentModelTypeKind[\"bool\"] = \"bool\";\n    ComponentModelTypeKind[\"u8\"] = \"u8\";\n    ComponentModelTypeKind[\"u16\"] = \"u16\";\n    ComponentModelTypeKind[\"u32\"] = \"u32\";\n    ComponentModelTypeKind[\"u64\"] = \"u64\";\n    ComponentModelTypeKind[\"s8\"] = \"s8\";\n    ComponentModelTypeKind[\"s16\"] = \"s16\";\n    ComponentModelTypeKind[\"s32\"] = \"s32\";\n    ComponentModelTypeKind[\"s64\"] = \"s64\";\n    ComponentModelTypeKind[\"float32\"] = \"float32\";\n    ComponentModelTypeKind[\"float64\"] = \"float64\";\n    ComponentModelTypeKind[\"char\"] = \"char\";\n    ComponentModelTypeKind[\"string\"] = \"string\";\n    ComponentModelTypeKind[\"list\"] = \"list\";\n    ComponentModelTypeKind[\"record\"] = \"record\";\n    ComponentModelTypeKind[\"tuple\"] = \"tuple\";\n    ComponentModelTypeKind[\"variant\"] = \"variant\";\n    ComponentModelTypeKind[\"enum\"] = \"enum\";\n    ComponentModelTypeKind[\"flags\"] = \"flags\";\n    ComponentModelTypeKind[\"option\"] = \"option\";\n    ComponentModelTypeKind[\"result\"] = \"result\";\n    ComponentModelTypeKind[\"resource\"] = \"resource\";\n    ComponentModelTypeKind[\"resourceHandle\"] = \"resourceHandle\";\n    ComponentModelTypeKind[\"borrow\"] = \"borrow\";\n    ComponentModelTypeKind[\"own\"] = \"own\";\n})(ComponentModelTypeKind || (exports.ComponentModelTypeKind = ComponentModelTypeKind = {}));\nexports.bool = {\n    kind: ComponentModelTypeKind.bool,\n    size: 1,\n    alignment: 1,\n    flatTypes: [$i32],\n    load(memory, offset) {\n        return memory.getUint8(offset) !== 0;\n    },\n    liftFlat(_memory, values) {\n        const value = values.next().value;\n        if (value < 0) {\n            throw new Error(`Invalid bool value ${value}`);\n        }\n        return value !== 0;\n    },\n    alloc(memory) {\n        return memory.alloc(exports.bool.alignment, exports.bool.size);\n    },\n    store(memory, offset, value) {\n        memory.setUint8(offset, value ? 1 : 0);\n    },\n    lowerFlat(result, _memory, value) {\n        result.push(value ? 1 : 0);\n    },\n    copy(dest, dest_offset, src, src_offset) {\n        src.copyBytes(src_offset, exports.bool.size, dest, dest_offset);\n    }\n};\nvar $u8;\n(function ($u8) {\n    $u8.kind = ComponentModelTypeKind.u8;\n    $u8.size = 1;\n    $u8.alignment = Alignment.byte;\n    $u8.flatTypes = [$i32];\n    $u8.LOW_VALUE = 0;\n    $u8.HIGH_VALUE = 255;\n    function load(memory, offset) {\n        return memory.getUint8(offset);\n    }\n    $u8.load = load;\n    function liftFlat(_memory, values) {\n        const value = values.next().value;\n        if (value < $u8.LOW_VALUE || value > $u8.HIGH_VALUE || !Number.isInteger(value)) {\n            throw new Error(`Invalid u8 value ${value}`);\n        }\n        return value;\n    }\n    $u8.liftFlat = liftFlat;\n    function alloc(memory) {\n        return memory.alloc($u8.alignment, $u8.size);\n    }\n    $u8.alloc = alloc;\n    function store(memory, offset, value) {\n        memory.setUint8(offset, value);\n    }\n    $u8.store = store;\n    function lowerFlat(result, _memory, value) {\n        if (value < $u8.LOW_VALUE || value > $u8.HIGH_VALUE || !Number.isInteger(value)) {\n            throw new Error(`Invalid u8 value ${value}`);\n        }\n        result.push(value);\n    }\n    $u8.lowerFlat = lowerFlat;\n    function copy(dest, dest_offset, src, src_offset) {\n        src.copyBytes(src_offset, $u8.size, dest, dest_offset);\n    }\n    $u8.copy = copy;\n})($u8 || ($u8 = {}));\nexports.u8 = $u8;\nvar $u16;\n(function ($u16) {\n    $u16.kind = ComponentModelTypeKind.u16;\n    $u16.size = 2;\n    $u16.alignment = Alignment.halfWord;\n    $u16.flatTypes = [$i32];\n    $u16.LOW_VALUE = 0;\n    $u16.HIGH_VALUE = 65535;\n    function load(memory, offset) {\n        return memory.getUint16(offset);\n    }\n    $u16.load = load;\n    function liftFlat(_memory, values) {\n        const value = values.next().value;\n        if (value < $u16.LOW_VALUE || value > $u16.HIGH_VALUE || !Number.isInteger(value)) {\n            throw new Error(`Invalid u16 value ${value}`);\n        }\n        return value;\n    }\n    $u16.liftFlat = liftFlat;\n    function alloc(memory) {\n        return memory.alloc($u16.alignment, $u16.size);\n    }\n    $u16.alloc = alloc;\n    function store(memory, offset, value) {\n        memory.setUint16(offset, value);\n    }\n    $u16.store = store;\n    function lowerFlat(result, _memory, value) {\n        if (value < $u16.LOW_VALUE || value > $u16.HIGH_VALUE || !Number.isInteger(value)) {\n            throw new Error(`Invalid u16 value ${value}`);\n        }\n        result.push(value);\n    }\n    $u16.lowerFlat = lowerFlat;\n    function copy(dest, dest_offset, src, src_offset) {\n        dest.assertAlignment(dest_offset, $u16.alignment);\n        src.assertAlignment(src_offset, $u16.alignment);\n        src.copyBytes(src_offset, $u16.size, dest, dest_offset);\n    }\n    $u16.copy = copy;\n})($u16 || ($u16 = {}));\nexports.u16 = $u16;\nvar $u32;\n(function ($u32) {\n    $u32.kind = ComponentModelTypeKind.u32;\n    $u32.size = 4;\n    $u32.alignment = Alignment.word;\n    $u32.flatTypes = [$i32];\n    $u32.LOW_VALUE = 0;\n    $u32.HIGH_VALUE = 4294967295; // 2 ^ 32 - 1\n    function valid(value) {\n        return value >= $u32.LOW_VALUE && value <= $u32.HIGH_VALUE && Number.isInteger(value);\n    }\n    $u32.valid = valid;\n    function load(memory, offset) {\n        return memory.getUint32(offset);\n    }\n    $u32.load = load;\n    function liftFlat(_memory, values) {\n        const value = values.next().value;\n        if (value < $u32.LOW_VALUE || value > $u32.HIGH_VALUE || !Number.isInteger(value)) {\n            throw new Error(`Invalid u32 value ${value}`);\n        }\n        return value;\n    }\n    $u32.liftFlat = liftFlat;\n    function alloc(memory) {\n        return memory.alloc($u32.alignment, $u32.size);\n    }\n    $u32.alloc = alloc;\n    function store(memory, offset, value) {\n        memory.setUint32(offset, value);\n    }\n    $u32.store = store;\n    function lowerFlat(result, _memory, value) {\n        if (value < $u32.LOW_VALUE || value > $u32.HIGH_VALUE || !Number.isInteger(value)) {\n            throw new Error(`Invalid u32 value ${value}`);\n        }\n        result.push(value);\n    }\n    $u32.lowerFlat = lowerFlat;\n    function copy(dest, dest_offset, src, src_offset) {\n        dest.assertAlignment(dest_offset, $u32.alignment);\n        src.assertAlignment(src_offset, $u32.alignment);\n        src.copyBytes(src_offset, $u32.size, dest, dest_offset);\n    }\n    $u32.copy = copy;\n})($u32 || ($u32 = {}));\nexports.u32 = $u32;\nvar $u64;\n(function ($u64) {\n    $u64.kind = ComponentModelTypeKind.u64;\n    $u64.size = 8;\n    $u64.alignment = Alignment.doubleWord;\n    $u64.flatTypes = [$i64];\n    $u64.LOW_VALUE = 0n;\n    $u64.HIGH_VALUE = 18446744073709551615n; // 2 ^ 64 - 1\n    function load(memory, offset) {\n        return memory.getUint64(offset);\n    }\n    $u64.load = load;\n    function liftFlat(_memory, values) {\n        const value = values.next().value;\n        if (value < $u64.LOW_VALUE) {\n            throw new Error(`Invalid u64 value ${value}`);\n        }\n        return value;\n    }\n    $u64.liftFlat = liftFlat;\n    function alloc(memory) {\n        return memory.alloc($u64.alignment, $u64.size);\n    }\n    $u64.alloc = alloc;\n    function store(memory, offset, value) {\n        memory.setUint64(offset, value);\n    }\n    $u64.store = store;\n    function lowerFlat(result, _memory, value) {\n        if (value < $u64.LOW_VALUE) {\n            throw new Error(`Invalid u64 value ${value}`);\n        }\n        result.push(value);\n    }\n    $u64.lowerFlat = lowerFlat;\n    function copy(dest, dest_offset, src, src_offset) {\n        dest.assertAlignment(dest_offset, $u64.alignment);\n        src.assertAlignment(src_offset, $u64.alignment);\n        src.copyBytes(src_offset, $u64.size, dest, dest_offset);\n    }\n    $u64.copy = copy;\n})($u64 || ($u64 = {}));\nexports.u64 = $u64;\nvar $s8;\n(function ($s8) {\n    $s8.kind = ComponentModelTypeKind.s8;\n    $s8.size = 1;\n    $s8.alignment = Alignment.byte;\n    $s8.flatTypes = [$i32];\n    const LOW_VALUE = -128;\n    const HIGH_VALUE = 127;\n    function load(memory, offset) {\n        return memory.getInt8(offset);\n    }\n    $s8.load = load;\n    function liftFlat(_memory, values) {\n        const value = values.next().value;\n        // All int values in the component model are transferred as unsigned\n        // values. So for signed values we need to convert them back. First\n        // we check if the value is in range of the corresponding unsigned\n        // value and the convert it to a signed value.\n        if (value < $u8.LOW_VALUE || value > $u8.HIGH_VALUE || !Number.isInteger(value)) {\n            throw new Error(`Invalid u8 value ${value}`);\n        }\n        if (value <= HIGH_VALUE) {\n            return value;\n        }\n        else {\n            return value - 256;\n        }\n    }\n    $s8.liftFlat = liftFlat;\n    function alloc(memory) {\n        return memory.alloc($s8.alignment, $s8.size);\n    }\n    $s8.alloc = alloc;\n    function store(memory, offset, value) {\n        memory.setInt8(offset, value);\n    }\n    $s8.store = store;\n    function lowerFlat(result, _memory, value) {\n        if (value < LOW_VALUE || value > HIGH_VALUE || !Number.isInteger(value)) {\n            throw new Error(`Invalid s8 value ${value}`);\n        }\n        result.push((value < 0) ? (value + 256) : value);\n    }\n    $s8.lowerFlat = lowerFlat;\n    function copy(dest, dest_offset, src, src_offset) {\n        dest.assertAlignment(dest_offset, $s8.alignment);\n        src.assertAlignment(src_offset, $s8.alignment);\n        src.copyBytes(src_offset, $s8.size, dest, dest_offset);\n    }\n    $s8.copy = copy;\n})($s8 || ($s8 = {}));\nexports.s8 = $s8;\nvar $s16;\n(function ($s16) {\n    $s16.kind = ComponentModelTypeKind.s16;\n    $s16.size = 2;\n    $s16.alignment = Alignment.halfWord;\n    $s16.flatTypes = [$i32];\n    const LOW_VALUE = -32768; // -2 ^ 15\n    const HIGH_VALUE = 32767; // 2 ^ 15 - 1\n    function load(memory, offset) {\n        return memory.getInt16(offset);\n    }\n    $s16.load = load;\n    function liftFlat(_memory, values) {\n        const value = values.next().value;\n        if (value < $u16.LOW_VALUE || value > $u16.HIGH_VALUE || !Number.isInteger(value)) {\n            throw new Error(`Invalid s16 value ${value}`);\n        }\n        return (value <= HIGH_VALUE) ? value : value - 65536;\n    }\n    $s16.liftFlat = liftFlat;\n    function alloc(memory) {\n        return memory.alloc($s16.alignment, $s16.size);\n    }\n    $s16.alloc = alloc;\n    function store(memory, offset, value) {\n        memory.setInt16(offset, value);\n    }\n    $s16.store = store;\n    function lowerFlat(result, _memory, value) {\n        if (value < LOW_VALUE || value > HIGH_VALUE || !Number.isInteger(value)) {\n            throw new Error(`Invalid s16 value ${value}`);\n        }\n        result.push((value < 0) ? (value + 65536) : value);\n    }\n    $s16.lowerFlat = lowerFlat;\n    function copy(dest, dest_offset, src, src_offset) {\n        dest.assertAlignment(dest_offset, $s16.alignment);\n        src.assertAlignment(src_offset, $s16.alignment);\n        src.copyBytes(src_offset, $s16.size, dest, dest_offset);\n    }\n    $s16.copy = copy;\n})($s16 || ($s16 = {}));\nexports.s16 = $s16;\nvar $s32;\n(function ($s32) {\n    $s32.kind = ComponentModelTypeKind.s32;\n    $s32.size = 4;\n    $s32.alignment = Alignment.word;\n    $s32.flatTypes = [$i32];\n    const LOW_VALUE = -2147483648; // -2 ^ 31\n    const HIGH_VALUE = 2147483647; // 2 ^ 31 - 1\n    function load(memory, offset) {\n        return memory.getInt32(offset);\n    }\n    $s32.load = load;\n    function liftFlat(_memory, values) {\n        const value = values.next().value;\n        if (value < $u32.LOW_VALUE || value > $u32.HIGH_VALUE || !Number.isInteger(value)) {\n            throw new Error(`Invalid s32 value ${value}`);\n        }\n        return (value <= HIGH_VALUE) ? value : value - 4294967296;\n    }\n    $s32.liftFlat = liftFlat;\n    function alloc(memory) {\n        return memory.alloc($s32.alignment, $s32.size);\n    }\n    $s32.alloc = alloc;\n    function store(memory, offset, value) {\n        memory.setInt32(offset, value);\n    }\n    $s32.store = store;\n    function lowerFlat(result, _memory, value) {\n        if (value < LOW_VALUE || value > HIGH_VALUE || !Number.isInteger(value)) {\n            throw new Error(`Invalid s32 value ${value}`);\n        }\n        result.push((value < 0) ? (value + 4294967296) : value);\n    }\n    $s32.lowerFlat = lowerFlat;\n    function copy(dest, dest_offset, src, src_offset) {\n        dest.assertAlignment(dest_offset, $s32.alignment);\n        src.assertAlignment(src_offset, $s32.alignment);\n        src.copyBytes(src_offset, $s32.size, dest, dest_offset);\n    }\n    $s32.copy = copy;\n})($s32 || ($s32 = {}));\nexports.s32 = $s32;\nvar $s64;\n(function ($s64) {\n    $s64.kind = ComponentModelTypeKind.s64;\n    $s64.size = 8;\n    $s64.alignment = Alignment.doubleWord;\n    $s64.flatTypes = [$i64];\n    const LOW_VALUE = -9223372036854775808n; // -2 ^ 63\n    const HIGH_VALUE = 9223372036854775807n; // 2 ^ 63 - 1\n    function load(memory, offset) {\n        return memory.getInt64(offset);\n    }\n    $s64.load = load;\n    function liftFlat(_memory, values) {\n        const value = values.next().value;\n        if (value < $u64.LOW_VALUE) {\n            throw new Error(`Invalid s64 value ${value}`);\n        }\n        return (value <= HIGH_VALUE) ? value : value - 18446744073709551616n;\n    }\n    $s64.liftFlat = liftFlat;\n    function alloc(memory) {\n        return memory.alloc($s64.alignment, $s64.size);\n    }\n    $s64.alloc = alloc;\n    function store(memory, offset, value) {\n        memory.setInt64(offset, value);\n    }\n    $s64.store = store;\n    function lowerFlat(result, _memory, value) {\n        if (value < LOW_VALUE || value > HIGH_VALUE) {\n            throw new Error(`Invalid s64 value ${value}`);\n        }\n        result.push((value < 0) ? (value + 18446744073709551616n) : value);\n    }\n    $s64.lowerFlat = lowerFlat;\n    function copy(dest, dest_offset, src, src_offset) {\n        dest.assertAlignment(dest_offset, $s64.alignment);\n        src.assertAlignment(src_offset, $s64.alignment);\n        src.copyBytes(src_offset, $s64.size, dest, dest_offset);\n    }\n    $s64.copy = copy;\n})($s64 || ($s64 = {}));\nexports.s64 = $s64;\nvar $float32;\n(function ($float32) {\n    $float32.kind = ComponentModelTypeKind.float32;\n    $float32.size = 4;\n    $float32.alignment = Alignment.word;\n    $float32.flatTypes = [$f32];\n    const LOW_VALUE = -3.4028234663852886e+38;\n    const HIGH_VALUE = 3.4028234663852886e+38;\n    const NAN = 0x7fc00000;\n    function load(memory, offset) {\n        return memory.getFloat32(offset);\n    }\n    $float32.load = load;\n    function liftFlat(_memory, values) {\n        const value = values.next().value;\n        if (value < LOW_VALUE || value > HIGH_VALUE) {\n            throw new Error(`Invalid float32 value ${value}`);\n        }\n        return value === NAN ? Number.NaN : value;\n    }\n    $float32.liftFlat = liftFlat;\n    function alloc(memory) {\n        return memory.alloc($float32.alignment, $float32.size);\n    }\n    $float32.alloc = alloc;\n    function store(memory, offset, value) {\n        memory.setFloat32(offset, value);\n    }\n    $float32.store = store;\n    function lowerFlat(result, _memory, value) {\n        if (value < LOW_VALUE || value > HIGH_VALUE) {\n            throw new Error(`Invalid float32 value ${value}`);\n        }\n        result.push(Number.isNaN(value) ? NAN : value);\n    }\n    $float32.lowerFlat = lowerFlat;\n    function copy(dest, dest_offset, src, src_offset) {\n        dest.assertAlignment(dest_offset, $float32.alignment);\n        src.assertAlignment(src_offset, $float32.alignment);\n        src.copyBytes(src_offset, $float32.size, dest, dest_offset);\n    }\n    $float32.copy = copy;\n})($float32 || ($float32 = {}));\nexports.float32 = $float32;\nvar $float64;\n(function ($float64) {\n    $float64.kind = ComponentModelTypeKind.float64;\n    $float64.size = 8;\n    $float64.alignment = Alignment.doubleWord;\n    $float64.flatTypes = [$f64];\n    const LOW_VALUE = -1 * Number.MAX_VALUE;\n    const HIGH_VALUE = Number.MAX_VALUE;\n    const NAN = 0x7ff8000000000000;\n    function load(memory, offset) {\n        return memory.getFloat64(offset);\n    }\n    $float64.load = load;\n    function liftFlat(_memory, values) {\n        const value = values.next().value;\n        if (value < LOW_VALUE || value > HIGH_VALUE) {\n            throw new Error(`Invalid float64 value ${value}`);\n        }\n        return value === NAN ? Number.NaN : value;\n    }\n    $float64.liftFlat = liftFlat;\n    function alloc(memory) {\n        return memory.alloc($float64.alignment, $float64.size);\n    }\n    $float64.alloc = alloc;\n    function store(memory, offset, value) {\n        memory.setFloat64(offset, value);\n    }\n    $float64.store = store;\n    function lowerFlat(result, _memory, value) {\n        if (value < LOW_VALUE || value > HIGH_VALUE) {\n            throw new Error(`Invalid float64 value ${value}`);\n        }\n        result.push(Number.isNaN(value) ? NAN : value);\n    }\n    $float64.lowerFlat = lowerFlat;\n    function copy(dest, dest_offset, src, src_offset) {\n        dest.assertAlignment(dest_offset, $float64.alignment);\n        src.assertAlignment(src_offset, $float64.alignment);\n        src.copyBytes(src_offset, $float64.size, dest, dest_offset);\n    }\n    $float64.copy = copy;\n})($float64 || ($float64 = {}));\nexports.float64 = $float64;\nexports.byte = {\n    kind: exports.u8.kind,\n    size: exports.u8.size,\n    alignment: exports.u8.alignment,\n    flatTypes: exports.u8.flatTypes,\n    load: exports.u8.load,\n    liftFlat: exports.u8.liftFlat,\n    alloc: exports.u8.alloc,\n    store: exports.u8.store,\n    lowerFlat: exports.u8.lowerFlat,\n    copy: exports.u8.copy\n};\nexports.size = {\n    kind: exports.u32.kind,\n    size: exports.u32.size,\n    alignment: exports.u32.alignment,\n    flatTypes: exports.u32.flatTypes,\n    load: exports.u32.load,\n    liftFlat: exports.u32.liftFlat,\n    alloc: exports.u32.alloc,\n    store: exports.u32.store,\n    lowerFlat: exports.u32.lowerFlat,\n    copy: exports.u32.copy\n};\nexports.ptr = {\n    kind: exports.u32.kind,\n    size: exports.u32.size,\n    alignment: exports.u32.alignment,\n    flatTypes: exports.u32.flatTypes,\n    load: exports.u32.load,\n    liftFlat: exports.u32.liftFlat,\n    alloc: exports.u32.alloc,\n    store: exports.u32.store,\n    lowerFlat: exports.u32.lowerFlat,\n    copy: exports.u32.copy\n};\nvar $wchar;\n(function ($wchar) {\n    $wchar.kind = ComponentModelTypeKind.char;\n    $wchar.size = 4;\n    $wchar.alignment = Alignment.word;\n    $wchar.flatTypes = [$i32];\n    function load(memory, offset, context) {\n        return fromCodePoint(exports.u32.load(memory, offset, context));\n    }\n    $wchar.load = load;\n    function liftFlat(memory, values, context) {\n        return fromCodePoint(exports.u32.liftFlat(memory, values, context));\n    }\n    $wchar.liftFlat = liftFlat;\n    function alloc(memory) {\n        return exports.u32.alloc(memory);\n    }\n    $wchar.alloc = alloc;\n    function store(memory, offset, value, context) {\n        exports.u32.store(memory, offset, asCodePoint(value), context);\n    }\n    $wchar.store = store;\n    function lowerFlat(result, memory, value, context) {\n        exports.u32.lowerFlat(result, memory, asCodePoint(value), context);\n    }\n    $wchar.lowerFlat = lowerFlat;\n    function copy(dest, dest_offset, src, src_offset) {\n        dest.assertAlignment(dest_offset, $wchar.alignment);\n        src.assertAlignment(src_offset, $wchar.alignment);\n        src.copyBytes(src_offset, $wchar.size, dest, dest_offset);\n    }\n    $wchar.copy = copy;\n    function fromCodePoint(code) {\n        if (code >= 0x110000 || (0xD800 <= code && code <= 0xDFFF)) {\n            throw new ComponentModelTrap('Invalid code point');\n        }\n        return String.fromCodePoint(code);\n    }\n    function asCodePoint(str) {\n        if (str.length !== 1) {\n            throw new ComponentModelTrap('String length must be 1');\n        }\n        const code = str.codePointAt(0);\n        if (!(code <= 0xD7FF || (0xD800 <= code && code <= 0x10FFFF))) {\n            throw new ComponentModelTrap('Invalid code point');\n        }\n        return code;\n    }\n})($wchar || ($wchar = {}));\nexports.wchar = $wchar;\nvar $wstring;\n(function ($wstring) {\n    const offsets = {\n        data: 0,\n        codeUnits: 4\n    };\n    $wstring.kind = ComponentModelTypeKind.string;\n    $wstring.size = 8;\n    $wstring.alignment = Alignment.word;\n    $wstring.flatTypes = [$i32, $i32];\n    function load(memRange, offset, context) {\n        const dataPtr = memRange.getUint32(offset + offsets.data);\n        const codeUnits = memRange.getUint32(offset + offsets.codeUnits);\n        return loadFromRange(memRange.memory, dataPtr, codeUnits, context.options);\n    }\n    $wstring.load = load;\n    function liftFlat(memory, values, context) {\n        const dataPtr = values.next().value;\n        const codeUnits = values.next().value;\n        return loadFromRange(memory, dataPtr, codeUnits, context.options);\n    }\n    $wstring.liftFlat = liftFlat;\n    function alloc(memory) {\n        return memory.alloc($wstring.alignment, $wstring.size);\n    }\n    $wstring.alloc = alloc;\n    function store(memory, offset, str, context) {\n        const [ptr, codeUnits] = storeIntoRange(memory.memory, str, context.options);\n        memory.setUint32(offset + offsets.data, ptr);\n        memory.setUint32(offset + offsets.codeUnits, codeUnits);\n    }\n    $wstring.store = store;\n    function lowerFlat(result, memory, str, context) {\n        result.push(...storeIntoRange(memory, str, context.options));\n    }\n    $wstring.lowerFlat = lowerFlat;\n    function copy(dest, dest_offset, src, src_offset, context) {\n        dest.assertAlignment(dest_offset, $wstring.alignment);\n        src.assertAlignment(src_offset, $wstring.alignment);\n        src.copyBytes(src_offset, $wstring.size, dest, dest_offset);\n        const data = src.getUint32(src_offset + offsets.data);\n        const codeUnits = src.getUint32(src_offset + offsets.codeUnits);\n        const [alignment, byteLength] = getAlignmentAndByteLength(codeUnits, context.options);\n        const srcReader = src.memory.readonly(data, byteLength);\n        const destWriter = dest.memory.alloc(alignment, byteLength);\n        srcReader.copyBytes(0, byteLength, destWriter, 0);\n    }\n    $wstring.copy = copy;\n    function getAlignmentAndByteLength(codeUnits, options) {\n        const encoding = options.encoding;\n        if (encoding === 'latin1+utf-16') {\n            throw new Error('latin1+utf-16 encoding not yet supported');\n        }\n        if (encoding === 'utf-8') {\n            return [exports.u8.alignment, codeUnits];\n        }\n        else if (encoding === 'utf-16') {\n            return [exports.u16.alignment, codeUnits * 2];\n        }\n        else {\n            throw new Error('Unsupported encoding');\n        }\n    }\n    $wstring.getAlignmentAndByteLength = getAlignmentAndByteLength;\n    function loadFromRange(memory, data, codeUnits, options) {\n        const encoding = options.encoding;\n        if (encoding === 'latin1+utf-16') {\n            throw new Error('latin1+utf-16 encoding not yet supported');\n        }\n        if (encoding === 'utf-8') {\n            const byteLength = codeUnits;\n            const reader = memory.readonly(data, byteLength);\n            return utf8Decoder.decode(reader.getUint8Array(0, byteLength));\n        }\n        else if (encoding === 'utf-16') {\n            const reader = memory.readonly(data, codeUnits * 2);\n            return String.fromCharCode(...reader.getUint16Array(data, codeUnits));\n        }\n        else {\n            throw new Error('Unsupported encoding');\n        }\n    }\n    function storeIntoRange(memory, str, options) {\n        const { encoding } = options;\n        if (encoding === 'latin1+utf-16') {\n            throw new Error('latin1+utf-16 encoding not yet supported');\n        }\n        if (encoding === 'utf-8') {\n            const data = utf8Encoder.encode(str);\n            const writer = memory.alloc(exports.u8.alignment, data.length);\n            writer.setUint8Array(0, data);\n            return [writer.ptr, data.length];\n        }\n        else if (encoding === 'utf-16') {\n            const writer = memory.alloc(exports.u16.alignment, str.length * 2);\n            const data = writer.getUint16View(0);\n            for (let i = 0; i < str.length; i++) {\n                data[i] = str.charCodeAt(i);\n            }\n            return [writer.ptr, data.length];\n        }\n        else {\n            throw new Error('Unsupported encoding');\n        }\n    }\n})($wstring || ($wstring = {}));\nexports.wstring = $wstring;\nclass ListType {\n    static offsets = {\n        data: 0,\n        length: 4\n    };\n    elementType;\n    kind;\n    size;\n    alignment;\n    flatTypes;\n    constructor(elementType) {\n        this.elementType = elementType;\n        this.kind = ComponentModelTypeKind.list;\n        this.size = 8;\n        this.alignment = Alignment.word;\n        this.flatTypes = [$i32, $i32];\n    }\n    load(memRange, offset, context) {\n        const offsets = ListType.offsets;\n        const dataPtr = memRange.getUint32(offset + offsets.data);\n        const length = memRange.getUint32(offset + offsets.length);\n        return this.loadFromRange(memRange.memory.readonly(dataPtr, length * this.elementType.size), length, context);\n    }\n    liftFlat(memory, values, context) {\n        const dataPtr = values.next().value;\n        const length = values.next().value;\n        return this.loadFromRange(memory.readonly(dataPtr, length * this.elementType.size), length, context);\n    }\n    alloc(memory) {\n        return memory.alloc(this.alignment, this.size);\n    }\n    store(memRange, offset, values, context) {\n        const elementMemory = memRange.memory.alloc(this.elementType.alignment, this.elementType.size * values.length);\n        this.storeIntoRange(elementMemory, values, context);\n        const offsets = ListType.offsets;\n        memRange.setUint32(offset + offsets.data, elementMemory.ptr);\n        memRange.setUint32(offset + offsets.length, values.length);\n    }\n    lowerFlat(result, memory, values, context) {\n        const elementMemory = memory.alloc(this.elementType.alignment, this.elementType.size * values.length);\n        this.storeIntoRange(elementMemory, values, context);\n        result.push(elementMemory.ptr, values.length);\n    }\n    copy(dest, dest_offset, src, src_offset) {\n        dest.assertAlignment(dest_offset, this.alignment);\n        src.assertAlignment(src_offset, this.alignment);\n        const offsets = ListType.offsets;\n        src.copyBytes(src_offset, this.size, dest, dest_offset);\n        const data = src.getUint32(src_offset + offsets.data);\n        const byteLength = src.getUint32(src_offset + offsets.length) * this.elementType.size;\n        const srcReader = src.memory.readonly(data, byteLength);\n        const destWriter = dest.memory.alloc(this.elementType.alignment, byteLength);\n        srcReader.copyBytes(0, byteLength, destWriter, 0);\n    }\n    loadFromRange(memory, length, context) {\n        const result = [];\n        let offset = 0;\n        for (let i = 0; i < length; i++) {\n            result.push(this.elementType.load(memory, offset, context));\n            offset += this.elementType.size;\n        }\n        return result;\n    }\n    storeIntoRange(memory, values, context) {\n        let offset = 0;\n        for (const item of values) {\n            this.elementType.store(memory, offset, item, context);\n            offset += this.elementType.size;\n        }\n    }\n}\nexports.ListType = ListType;\nclass TypeArrayType {\n    static offsets = {\n        data: 0,\n        length: 4\n    };\n    kind;\n    size;\n    alignment;\n    flatTypes;\n    elementType;\n    constructor(elementType) {\n        this.kind = ComponentModelTypeKind.list;\n        this.size = 8;\n        this.alignment = 4;\n        this.flatTypes = [$i32, $i32];\n        this.elementType = elementType;\n    }\n    load(memRange, offset) {\n        const offsets = TypeArrayType.offsets;\n        const dataPtr = memRange.getUint32(offset + offsets.data);\n        const length = memRange.getUint32(offset + offsets.length);\n        return this.loadFromRange(memRange.memory.readonly(dataPtr, length * this.elementType.size), length);\n    }\n    liftFlat(memory, values) {\n        const dataPtr = values.next().value;\n        const length = values.next().value;\n        return this.loadFromRange(memory.readonly(dataPtr, length * this.elementType.size), length);\n    }\n    alloc(memory) {\n        return memory.alloc(this.alignment, this.size);\n    }\n    store(memRange, offset, value) {\n        const writer = memRange.memory.alloc(this.elementType.alignment, value.byteLength);\n        this.storeIntoRange(writer, value);\n        const offsets = TypeArrayType.offsets;\n        memRange.setUint32(offset + offsets.data, writer.ptr);\n        memRange.setUint32(offset + offsets.length, value.length);\n    }\n    lowerFlat(result, memory, value) {\n        const writer = memory.alloc(this.elementType.alignment, value.byteLength);\n        this.storeIntoRange(writer, value);\n        result.push(writer.ptr, value.length);\n    }\n    copy(dest, dest_offset, src, src_offset) {\n        dest.assertAlignment(dest_offset, this.alignment);\n        src.assertAlignment(src_offset, this.alignment);\n        const offsets = TypeArrayType.offsets;\n        src.copyBytes(src_offset, this.size, dest, dest_offset);\n        const data = src.getUint32(src_offset + offsets.data);\n        const byteLength = src.getUint32(src_offset + offsets.length) * this.elementType.size;\n        const srcReader = src.memory.readonly(data, byteLength);\n        const destWriter = dest.memory.alloc(this.elementType.alignment, byteLength);\n        srcReader.copyBytes(0, byteLength, destWriter, 0);\n    }\n}\nclass Int8ArrayType extends TypeArrayType {\n    constructor() {\n        super($s8);\n    }\n    loadFromRange(memory, length) {\n        return memory.getInt8Array(0, length);\n    }\n    storeIntoRange(memory, value) {\n        memory.setInt8Array(0, value);\n    }\n}\nexports.Int8ArrayType = Int8ArrayType;\nclass Int16ArrayType extends TypeArrayType {\n    constructor() {\n        super($s16);\n    }\n    loadFromRange(memory, length) {\n        return memory.getInt16Array(0, length);\n    }\n    storeIntoRange(memory, value) {\n        memory.setInt16Array(0, value);\n    }\n}\nexports.Int16ArrayType = Int16ArrayType;\nclass Int32ArrayType extends TypeArrayType {\n    constructor() {\n        super($s32);\n    }\n    loadFromRange(memory, length) {\n        return memory.getInt32Array(0, length);\n    }\n    storeIntoRange(memory, value) {\n        memory.setInt32Array(0, value);\n    }\n}\nexports.Int32ArrayType = Int32ArrayType;\nclass BigInt64ArrayType extends TypeArrayType {\n    constructor() {\n        super($s64);\n    }\n    loadFromRange(memory, length) {\n        return memory.getInt64Array(0, length);\n    }\n    storeIntoRange(memory, value) {\n        memory.setInt64Array(0, value);\n    }\n}\nexports.BigInt64ArrayType = BigInt64ArrayType;\nclass Uint8ArrayType extends TypeArrayType {\n    constructor() {\n        super($u8);\n    }\n    loadFromRange(memory, length) {\n        return memory.getUint8Array(0, length);\n    }\n    storeIntoRange(memory, value) {\n        memory.setUint8Array(0, value);\n    }\n}\nexports.Uint8ArrayType = Uint8ArrayType;\nclass Uint16ArrayType extends TypeArrayType {\n    constructor() {\n        super($u16);\n    }\n    loadFromRange(memory, length) {\n        return memory.getUint16Array(0, length);\n    }\n    storeIntoRange(memory, value) {\n        memory.setUint16Array(0, value);\n    }\n}\nexports.Uint16ArrayType = Uint16ArrayType;\nclass Uint32ArrayType extends TypeArrayType {\n    constructor() {\n        super($u32);\n    }\n    loadFromRange(memory, length) {\n        return memory.getUint32Array(0, length);\n    }\n    storeIntoRange(memory, value) {\n        memory.setUint32Array(0, value);\n    }\n}\nexports.Uint32ArrayType = Uint32ArrayType;\nclass BigUint64ArrayType extends TypeArrayType {\n    constructor() {\n        super($u64);\n    }\n    loadFromRange(memory, length) {\n        return memory.getUint64Array(0, length);\n    }\n    storeIntoRange(memory, value) {\n        memory.setUint64Array(0, value);\n    }\n}\nexports.BigUint64ArrayType = BigUint64ArrayType;\nclass Float32ArrayType extends TypeArrayType {\n    constructor() {\n        super($float32);\n    }\n    loadFromRange(memory, length) {\n        return memory.getFloat32Array(0, length);\n    }\n    storeIntoRange(memory, value) {\n        memory.setFloat32Array(0, value);\n    }\n}\nexports.Float32ArrayType = Float32ArrayType;\nclass Float64ArrayType extends TypeArrayType {\n    constructor() {\n        super($float64);\n    }\n    loadFromRange(memory, length) {\n        return memory.getFloat64Array(0, length);\n    }\n    storeIntoRange(memory, value) {\n        memory.setFloat64Array(0, value);\n    }\n}\nexports.Float64ArrayType = Float64ArrayType;\nclass BaseRecordType {\n    fields;\n    kind;\n    size;\n    alignment;\n    flatTypes;\n    constructor(fields, kind) {\n        this.fields = fields;\n        this.kind = kind;\n        this.alignment = BaseRecordType.alignment(fields);\n        this.size = BaseRecordType.size(fields, this.alignment);\n        this.flatTypes = BaseRecordType.flatTypes(fields);\n    }\n    load(memory, offset, context) {\n        memory.assertAlignment(offset, this.alignment);\n        const result = [];\n        for (const field of this.fields) {\n            offset = align(offset, field.type.alignment);\n            result.push(field.type.load(memory, offset, context));\n            offset += field.type.size;\n        }\n        return this.create(this.fields, result);\n    }\n    liftFlat(memory, values, context) {\n        const result = [];\n        for (const field of this.fields) {\n            result.push(field.type.liftFlat(memory, values, context));\n        }\n        return this.create(this.fields, result);\n    }\n    alloc(memory) {\n        return memory.alloc(this.alignment, this.size);\n    }\n    store(memory, offset, record, context) {\n        memory.assertAlignment(offset, this.alignment);\n        const values = this.elements(record, this.fields);\n        for (let i = 0; i < this.fields.length; i++) {\n            const field = this.fields[i];\n            const value = values[i];\n            offset = align(offset, field.type.alignment);\n            field.type.store(memory, offset, value, context);\n            offset += field.type.size;\n        }\n    }\n    lowerFlat(result, memory, record, context) {\n        const values = this.elements(record, this.fields);\n        for (let i = 0; i < this.fields.length; i++) {\n            const field = this.fields[i];\n            const value = values[i];\n            field.type.lowerFlat(result, memory, value, context);\n        }\n    }\n    copy(dest, dest_offset, src, src_offset, context) {\n        for (const field of this.fields) {\n            dest_offset = align(dest_offset, field.type.alignment);\n            src_offset = align(src_offset, field.type.alignment);\n            field.type.copy(dest, dest_offset, src, src_offset, context);\n            dest_offset += field.type.size;\n            src_offset += field.type.size;\n        }\n    }\n    static size(fields, recordAlignment) {\n        let result = 0;\n        for (const field of fields) {\n            result = align(result, field.type.alignment);\n            result += field.type.size;\n        }\n        return align(result, recordAlignment);\n    }\n    static alignment(fields) {\n        let result = 1;\n        for (const field of fields) {\n            result = Math.max(result, field.type.alignment);\n        }\n        return result;\n    }\n    static flatTypes(fields) {\n        const result = [];\n        for (const field of fields) {\n            result.push(...field.type.flatTypes);\n        }\n        return result;\n    }\n}\nvar RecordField;\n(function (RecordField) {\n    function create(name, type) {\n        return { name, type };\n    }\n    RecordField.create = create;\n})(RecordField || (RecordField = {}));\nclass RecordType extends BaseRecordType {\n    constructor(fields) {\n        const recordFields = [];\n        for (const [name, type] of fields) {\n            recordFields.push(RecordField.create(name, type));\n        }\n        super(recordFields, ComponentModelTypeKind.record);\n    }\n    create(fields, values) {\n        const result = {};\n        for (let i = 0; i < fields.length; i++) {\n            const field = fields[i];\n            const value = values[i];\n            result[field.name] = value;\n        }\n        return result;\n    }\n    elements(record, fields) {\n        const result = [];\n        for (const field of fields) {\n            const value = record[field.name];\n            result.push(value);\n        }\n        return result;\n    }\n}\nexports.RecordType = RecordType;\nvar TupleField;\n(function (TupleField) {\n    function create(type) {\n        return { type };\n    }\n    TupleField.create = create;\n})(TupleField || (TupleField = {}));\nclass TupleType extends BaseRecordType {\n    constructor(fields) {\n        const tupleFields = [];\n        for (const type of fields) {\n            tupleFields.push(TupleField.create(type));\n        }\n        super(tupleFields, ComponentModelTypeKind.tuple);\n    }\n    create(_fields, values) {\n        return values;\n    }\n    elements(record, _fields) {\n        return record;\n    }\n}\nexports.TupleType = TupleType;\nclass FlagsType {\n    type;\n    arraySize;\n    kind;\n    size;\n    alignment;\n    flatTypes;\n    constructor(numberOfFlags) {\n        this.kind = ComponentModelTypeKind.flags;\n        this.size = FlagsType.size(numberOfFlags);\n        this.alignment = FlagsType.alignment(numberOfFlags);\n        this.flatTypes = FlagsType.flatTypes(numberOfFlags);\n        this.type = FlagsType.getType(numberOfFlags);\n        this.arraySize = FlagsType.num32Flags(numberOfFlags);\n    }\n    load(memory, offset, context) {\n        return this.type === undefined ? 0 : this.loadFrom(this.type.load(memory, offset, context));\n    }\n    liftFlat(memory, values, context) {\n        return this.type === undefined ? 0 : this.loadFrom(this.type.liftFlat(memory, values, context));\n    }\n    loadFrom(value) {\n        if (typeof value === 'number') {\n            return value;\n        }\n        else {\n            let result = 0n;\n            for (let f = 0, i = value.length - 1; f < value.length; f++, i--) {\n                const bits = value[i];\n                result = result | (BigInt(bits) << BigInt(f * 32));\n            }\n            return result;\n        }\n    }\n    alloc(memory) {\n        return memory.alloc(this.alignment, this.size);\n    }\n    store(memory, offset, flags, context) {\n        if (this.type !== undefined) {\n            this.type.store(memory, offset, this.storeInto(flags), context);\n        }\n    }\n    lowerFlat(result, _memory, flags, context) {\n        if (this.type !== undefined) {\n            this.type.lowerFlat(result, _memory, this.storeInto(flags), context);\n        }\n    }\n    copy(dest, dest_offset, src, src_offset, context) {\n        if (this.type !== undefined) {\n            this.type.copy(dest, dest_offset, src, src_offset, context);\n        }\n    }\n    storeInto(value) {\n        if (typeof value === 'number') {\n            return value;\n        }\n        else {\n            const result = new Array(this.arraySize).fill(0);\n            for (let f = 0, i = result.length - 1; f < result.length; f++, i--) {\n                const bits = Number((value >> BigInt(f * 32)) & BigInt(0xffffffff));\n                result[i] = bits;\n            }\n            return result;\n        }\n    }\n    static size(numberOfFlags) {\n        if (numberOfFlags === 0) {\n            return 0;\n        }\n        else if (numberOfFlags <= 8) {\n            return 1;\n        }\n        else if (numberOfFlags <= 16) {\n            return 2;\n        }\n        else {\n            return 4 * this.num32Flags(numberOfFlags);\n        }\n    }\n    static alignment(numberOfFlags) {\n        if (numberOfFlags <= 8) {\n            return 1;\n        }\n        else if (numberOfFlags <= 16) {\n            return 2;\n        }\n        else {\n            return 4;\n        }\n    }\n    static getType(numberOfFlags) {\n        if (numberOfFlags === 0) {\n            return undefined;\n        }\n        else if (numberOfFlags <= 8) {\n            return exports.u8;\n        }\n        else if (numberOfFlags <= 16) {\n            return exports.u16;\n        }\n        else if (numberOfFlags <= 32) {\n            return exports.u32;\n        }\n        else {\n            return new TupleType(new Array(this.num32Flags(numberOfFlags)).fill(exports.u32));\n        }\n    }\n    static flatTypes(numberOfFlags) {\n        return new Array(this.num32Flags(numberOfFlags)).fill($i32);\n    }\n    static num32Flags(numberOfFlags) {\n        return Math.ceil(numberOfFlags / 32);\n    }\n}\nexports.FlagsType = FlagsType;\nvar VariantCase;\n(function (VariantCase) {\n    function create(index, tag, type) {\n        return { index, tag, type, wantFlatTypes: type !== undefined ? [] : undefined };\n    }\n    VariantCase.create = create;\n})(VariantCase || (VariantCase = {}));\nclass VariantType {\n    cases;\n    case2Index;\n    ctor;\n    discriminantType;\n    maxCaseAlignment;\n    kind;\n    size;\n    alignment;\n    flatTypes;\n    constructor(variants, ctor, kind = ComponentModelTypeKind.variant) {\n        const cases = [];\n        this.case2Index = new Map();\n        for (let i = 0; i < variants.length; i++) {\n            const type = variants[i][1];\n            const name = variants[i][0];\n            this.case2Index.set(name, i);\n            cases.push(VariantCase.create(i, name, type));\n        }\n        this.cases = cases;\n        this.ctor = ctor;\n        this.discriminantType = VariantType.discriminantType(cases.length);\n        this.maxCaseAlignment = VariantType.maxCaseAlignment(cases);\n        this.kind = kind;\n        this.size = VariantType.size(this.discriminantType, cases);\n        this.alignment = VariantType.alignment(this.discriminantType, cases);\n        this.flatTypes = VariantType.flatTypes(this.discriminantType, cases);\n    }\n    load(memory, offset, context) {\n        const caseIndex = this.discriminantType.load(memory, offset, context);\n        const caseVariant = this.cases[caseIndex];\n        if (caseVariant.type === undefined) {\n            return this.ctor(caseVariant.tag, undefined);\n        }\n        else {\n            offset += this.discriminantType.size;\n            offset = align(offset, this.maxCaseAlignment);\n            const value = caseVariant.type.load(memory, offset, context);\n            return this.ctor(caseVariant.tag, value);\n        }\n    }\n    liftFlat(memory, values, context) {\n        // First one is the discriminant type. So skip it.\n        let valuesToReadOver = this.flatTypes.length - 1;\n        const caseIndex = this.discriminantType.liftFlat(memory, values, context);\n        const caseVariant = this.cases[caseIndex];\n        let result;\n        if (caseVariant.type === undefined) {\n            result = this.ctor(caseVariant.tag, undefined);\n        }\n        else {\n            // The first flat type is the discriminant type. So skip it.\n            const wantFlatTypes = caseVariant.wantFlatTypes;\n            const iter = new CoerceValueIter(values, this.flatTypes.slice(1), wantFlatTypes);\n            const value = caseVariant.type.liftFlat(memory, iter, context);\n            result = this.ctor(caseVariant.tag, value);\n            valuesToReadOver = valuesToReadOver - wantFlatTypes.length;\n        }\n        for (let i = 0; i < valuesToReadOver; i++) {\n            values.next();\n        }\n        return result;\n    }\n    alloc(memory) {\n        return memory.alloc(this.alignment, this.size);\n    }\n    store(memory, offset, variantValue, context) {\n        const index = this.case2Index.get(variantValue.tag);\n        if (index === undefined) {\n            throw new ComponentModelTrap(`Variant case ${variantValue.tag} not found`);\n        }\n        this.discriminantType.store(memory, offset, index, context);\n        offset += this.discriminantType.size;\n        const c = this.cases[index];\n        if (c.type !== undefined && variantValue.value !== undefined) {\n            offset = align(offset, this.maxCaseAlignment);\n            c.type.store(memory, offset, variantValue.value, context);\n        }\n    }\n    lowerFlat(result, memory, variantValue, context) {\n        const flatTypes = this.flatTypes;\n        const index = this.case2Index.get(variantValue.tag);\n        if (index === undefined) {\n            throw new ComponentModelTrap(`Variant case ${variantValue.tag} not found`);\n        }\n        this.discriminantType.lowerFlat(result, memory, index, context);\n        const c = this.cases[index];\n        // First one is the discriminant type. So skip it.\n        let valuesToFill = this.flatTypes.length - 1;\n        if (c.type !== undefined && variantValue.value !== undefined) {\n            const payload = [];\n            c.type.lowerFlat(payload, memory, variantValue.value, context);\n            // First one is the discriminant type. So skip it.\n            const wantTypes = flatTypes.slice(1);\n            const haveTypes = c.wantFlatTypes;\n            if (payload.length !== haveTypes.length) {\n                throw new ComponentModelTrap('Mismatched flat types');\n            }\n            for (let i = 0; i < wantTypes.length; i++) {\n                const have = haveTypes[i];\n                const want = wantTypes[i];\n                if (have === $f32 && want === $i32) {\n                    payload[i] = WasmTypes.reinterpret_f32_as_i32(payload[i]);\n                }\n                else if (have === $i32 && want === $i64) {\n                    payload[i] = WasmTypes.convert_i32_to_i64(payload[i]);\n                }\n                else if (have === $f32 && want === $i64) {\n                    payload[i] = WasmTypes.reinterpret_f32_as_i64(payload[i]);\n                }\n                else if (have === $f64 && want === $i64) {\n                    payload[i] = WasmTypes.reinterpret_f64_as_i64(payload[i]);\n                }\n            }\n            valuesToFill = valuesToFill - payload.length;\n            result.push(...payload);\n        }\n        for (let i = flatTypes.length - valuesToFill; i < flatTypes.length; i++) {\n            const type = flatTypes[i];\n            if (type === $i64) {\n                result.push(0n);\n            }\n            else {\n                result.push(0);\n            }\n        }\n    }\n    copy(dest, dest_offset, src, src_offset, context) {\n        this.discriminantType.copy(dest, dest_offset, src, src_offset, context);\n        const caseIndex = this.discriminantType.load(src, src_offset, context);\n        const caseVariant = this.cases[caseIndex];\n        if (caseVariant.type === undefined) {\n            return;\n        }\n        src_offset += this.discriminantType.size;\n        src_offset = align(src_offset, this.maxCaseAlignment);\n        dest_offset += this.discriminantType.size;\n        dest_offset = align(dest_offset, this.maxCaseAlignment);\n        caseVariant.type.copy(dest, dest_offset, src, src_offset, context);\n    }\n    static size(discriminantType, cases) {\n        let result = discriminantType.size;\n        result = align(result, this.maxCaseAlignment(cases));\n        return result + this.maxCaseSize(cases);\n    }\n    static alignment(discriminantType, cases) {\n        return Math.max(discriminantType.alignment, this.maxCaseAlignment(cases));\n    }\n    static flatTypes(discriminantType, cases) {\n        const flat = [];\n        for (const c of cases) {\n            if (c.type === undefined) {\n                continue;\n            }\n            const flatTypes = c.type.flatTypes;\n            for (let i = 0; i < flatTypes.length; i++) {\n                const want = flatTypes[i];\n                if (i < flat.length) {\n                    const use = this.joinFlatType(flat[i], want);\n                    flat[i] = use;\n                    c.wantFlatTypes.push(want);\n                }\n                else {\n                    flat.push(want);\n                    c.wantFlatTypes.push(want);\n                }\n            }\n        }\n        return [...discriminantType.flatTypes, ...flat];\n    }\n    static discriminantType(cases) {\n        switch (Math.ceil(Math.log2(cases) / 8)) {\n            case 0: return exports.u8;\n            case 1: return exports.u8;\n            case 2: return exports.u16;\n            case 3: return exports.u32;\n        }\n        throw new ComponentModelTrap(`Too many cases: ${cases}`);\n    }\n    static maxCaseAlignment(cases) {\n        let result = 1;\n        for (const c of cases) {\n            if (c.type !== undefined) {\n                result = Math.max(result, c.type.alignment);\n            }\n        }\n        return result;\n    }\n    static maxCaseSize(cases) {\n        let result = 0;\n        for (const c of cases) {\n            if (c.type !== undefined) {\n                result = Math.max(result, c.type.size);\n            }\n        }\n        return result;\n    }\n    static joinFlatType(a, b) {\n        if (a === b) {\n            return a;\n        }\n        if ((a === $i32 && b === $f32) || (a === $f32 && b === $i32)) {\n            return $i32;\n        }\n        return $i64;\n    }\n}\nexports.VariantType = VariantType;\nclass EnumType {\n    discriminantType;\n    cases;\n    case2index;\n    kind;\n    size;\n    alignment;\n    flatTypes;\n    constructor(cases) {\n        this.discriminantType = EnumType.discriminantType(cases.length);\n        this.cases = cases;\n        this.case2index = new Map();\n        for (let i = 0; i < cases.length; i++) {\n            const c = cases[i];\n            this.case2index.set(c, i);\n        }\n        this.kind = ComponentModelTypeKind.enum;\n        this.size = this.discriminantType.size;\n        this.alignment = this.discriminantType.alignment;\n        this.flatTypes = this.discriminantType.flatTypes;\n    }\n    load(memory, offset, context) {\n        const index = this.assertRange(this.discriminantType.load(memory, offset, context));\n        return this.cases[index];\n    }\n    liftFlat(memory, values, context) {\n        const index = this.assertRange(this.discriminantType.liftFlat(memory, values, context));\n        return this.cases[index];\n    }\n    alloc(memory) {\n        return memory.alloc(this.alignment, this.size);\n    }\n    store(memory, offset, value, context) {\n        const index = this.case2index.get(value);\n        if (index === undefined) {\n            throw new ComponentModelTrap('Enumeration value not found');\n        }\n        this.discriminantType.store(memory, offset, index, context);\n    }\n    lowerFlat(result, memory, value, context) {\n        const index = this.case2index.get(value);\n        if (index === undefined) {\n            throw new ComponentModelTrap('Enumeration value not found');\n        }\n        this.discriminantType.lowerFlat(result, memory, index, context);\n    }\n    copy(dest, dest_offset, src, src_offset, context) {\n        this.discriminantType.copy(dest, dest_offset, src, src_offset, context);\n    }\n    assertRange(value) {\n        if (value < 0 || value > this.cases.length) {\n            throw new ComponentModelTrap('Enumeration value out of range');\n        }\n        return value;\n    }\n    static discriminantType(cases) {\n        switch (Math.ceil(Math.log2(cases) / 8)) {\n            case 0: return exports.u8;\n            case 1: return exports.u8;\n            case 2: return exports.u16;\n            case 3: return exports.u32;\n        }\n        throw new ComponentModelTrap(`Too many cases: ${cases}`);\n    }\n}\nexports.EnumType = EnumType;\nvar option;\n(function (option) {\n    option.none = 'none';\n    function None() {\n        return new OptionImpl(option.none, undefined);\n    }\n    option.None = None;\n    option.some = 'some';\n    function Some(value) {\n        return new OptionImpl(option.some, value);\n    }\n    option.Some = Some;\n    function _ctor(c, v) {\n        return new OptionImpl(c, v);\n    }\n    option._ctor = _ctor;\n    function isOption(value) {\n        return value instanceof OptionImpl;\n    }\n    option.isOption = isOption;\n    class OptionImpl {\n        _tag;\n        _value;\n        constructor(tag, value) {\n            this._tag = tag;\n            this._value = value;\n        }\n        get tag() {\n            return this._tag;\n        }\n        get value() {\n            return this._value;\n        }\n        isNone() {\n            return this._tag === option.none;\n        }\n        isSome() {\n            return this._tag === option.some;\n        }\n    }\n})(option || (exports.option = option = {}));\nclass OptionType {\n    valueType;\n    kind;\n    size;\n    alignment;\n    flatTypes;\n    constructor(valueType) {\n        this.valueType = valueType;\n        this.kind = ComponentModelTypeKind.option;\n        this.size = this.computeSize();\n        this.alignment = this.computeAlignment();\n        this.flatTypes = this.computeFlatTypes();\n    }\n    load(memory, offset, context) {\n        const caseIndex = exports.u8.load(memory, offset, context);\n        if (caseIndex === 0) { // index 0 is none\n            return context.options.keepOption ? option._ctor(option.none, undefined) : undefined;\n        }\n        else {\n            offset += exports.u8.size;\n            offset = align(offset, this.alignment);\n            const value = this.valueType.load(memory, offset, context);\n            return (context.options.keepOption ? option._ctor(option.some, value) : value);\n        }\n    }\n    liftFlat(memory, values, context) {\n        // First one is the discriminant type. So skip it.\n        const caseIndex = exports.u8.liftFlat(memory, values, context);\n        if (caseIndex === 0) { // Index 0 is none\n            // Read over the value params\n            for (let i = 0; i < this.valueType.flatTypes.length; i++) {\n                values.next();\n            }\n            return context.options.keepOption ? option._ctor(option.none, undefined) : undefined;\n        }\n        else {\n            const value = this.valueType.liftFlat(memory, values, context);\n            return (context.options.keepOption ? option._ctor(option.some, value) : value);\n        }\n    }\n    alloc(memory) {\n        return memory.alloc(this.alignment, this.size);\n    }\n    store(memory, offset, value, context) {\n        const optValue = this.asOptionValue(value, context.options);\n        const index = optValue.tag === option.none ? 0 : 1;\n        exports.u8.store(memory, offset, index, context);\n        offset += exports.u8.size;\n        if (optValue.tag === option.some) {\n            offset = align(offset, this.valueType.alignment);\n            this.valueType.store(memory, offset, optValue.value, context);\n        }\n    }\n    lowerFlat(result, memory, value, context) {\n        const optValue = this.asOptionValue(value, context.options);\n        const index = optValue.tag === option.none ? 0 : 1;\n        exports.u8.lowerFlat(result, memory, index, context);\n        if (optValue.tag === option.none) {\n            for (const type of this.valueType.flatTypes) {\n                if (type === $i64) {\n                    result.push(0n);\n                }\n                else {\n                    result.push(0);\n                }\n            }\n        }\n        else {\n            this.valueType.lowerFlat(result, memory, optValue.value, context);\n        }\n    }\n    copy(dest, dest_offset, src, src_offset, context) {\n        exports.u8.copy(dest, dest_offset, src, src_offset, context);\n        const caseIndex = exports.u8.load(src, src_offset, context);\n        if (caseIndex === 0) {\n            return;\n        }\n        else {\n            src_offset += exports.u8.size;\n            src_offset = align(src_offset, this.alignment);\n            dest_offset += exports.u8.size;\n            dest_offset = align(dest_offset, this.alignment);\n            this.valueType.copy(dest, dest_offset, src, src_offset, context);\n        }\n    }\n    asOptionValue(value, options) {\n        if (option.isOption(value)) {\n            if (!options.keepOption) {\n                throw new ComponentModelTrap('Received an option value although options should be unpacked.');\n            }\n            return value;\n        }\n        else {\n            if (options.keepOption) {\n                throw new ComponentModelTrap('Received a unpacked option value although options should NOT be unpacked.');\n            }\n            return value === undefined ? option._ctor(option.none, undefined) : option._ctor(option.some, value);\n        }\n    }\n    computeSize() {\n        let result = exports.u8.size;\n        result = align(result, this.valueType.alignment);\n        return result + this.valueType.size;\n    }\n    computeAlignment() {\n        return Math.max(exports.u8.alignment, this.valueType.alignment);\n    }\n    computeFlatTypes() {\n        return [...exports.u8.flatTypes, ...this.valueType.flatTypes];\n    }\n}\nexports.OptionType = OptionType;\nvar result;\n(function (result) {\n    result.ok = 'ok';\n    function Ok(value) {\n        return new ResultImpl(result.ok, value);\n    }\n    result.Ok = Ok;\n    result.error = 'error';\n    function Error(value) {\n        return new ResultImpl(result.error, value);\n    }\n    result.Error = Error;\n    function _ctor(c, v) {\n        return new ResultImpl(c, v);\n    }\n    result._ctor = _ctor;\n    class ResultImpl {\n        _tag;\n        _value;\n        constructor(tag, value) {\n            this._tag = tag;\n            this._value = value;\n        }\n        get tag() {\n            return this._tag;\n        }\n        get value() {\n            return this._value;\n        }\n        isOk() {\n            return this._tag === result.ok;\n        }\n        isError() {\n            return this._tag === result.error;\n        }\n    }\n    result.ResultImpl = ResultImpl;\n})(result || (exports.result = result = {}));\nclass ResultType extends VariantType {\n    constructor(okType, errorType) {\n        super([['ok', okType], ['error', errorType]], (result._ctor), ComponentModelTypeKind.result);\n    }\n}\nexports.ResultType = ResultType;\nclass Callable {\n    static EMPTY_JTYPE = Object.freeze([]);\n    static EMPTY_WASM_TYPE = Object.freeze([]);\n    static MAX_FLAT_PARAMS = 16;\n    static MAX_FLAT_RESULTS = 1;\n    witName;\n    params;\n    returnType;\n    paramType;\n    isSingleParam;\n    mode;\n    constructor(witName, params, returnType) {\n        this.witName = witName;\n        this.params = params;\n        this.returnType = returnType;\n        switch (params.length) {\n            case 0:\n                this.paramType = undefined;\n                this.isSingleParam = false;\n                break;\n            case 1:\n                this.paramType = params[0][1];\n                this.isSingleParam = true;\n                break;\n            default:\n                this.paramType = new TupleType(params.map(p => p[1]));\n                this.isSingleParam = false;\n        }\n        this.mode = 'lower';\n    }\n    liftParamValues(wasmValues, memory, context) {\n        if (this.paramType === undefined) {\n            return Callable.EMPTY_JTYPE;\n        }\n        let result;\n        if (this.paramType.flatTypes.length > Callable.MAX_FLAT_PARAMS) {\n            const p0 = wasmValues[0];\n            if (!Number.isInteger(p0)) {\n                throw new ComponentModelTrap('Invalid pointer');\n            }\n            result = this.paramType.load(memory.readonly(p0, this.paramType.size), 0, context);\n        }\n        else {\n            result = this.paramType.liftFlat(memory, wasmValues.values(), context);\n        }\n        return this.isSingleParam ? [result] : result;\n    }\n    lowerParamValues(values, memory, context, out) {\n        if (this.paramType === undefined) {\n            return Callable.EMPTY_WASM_TYPE;\n        }\n        if (this.isSingleParam && values.length !== 1) {\n            throw new ComponentModelTrap(`Expected a single parameter, but got ${values.length}`);\n        }\n        const toLower = this.isSingleParam ? values[0] : values;\n        if (this.paramType.flatTypes.length > Callable.MAX_FLAT_PARAMS) {\n            const writer = out !== undefined ? memory.preAllocated(out, this.paramType.size) : this.paramType.alloc(memory);\n            this.paramType.store(writer, 0, toLower, context);\n            return [writer.ptr];\n        }\n        else {\n            const result = [];\n            this.paramType.lowerFlat(result, memory, toLower, context);\n            return result;\n        }\n    }\n    lowerReturnValue(value, memory, context, out) {\n        if (this.returnType === undefined) {\n            return;\n        }\n        else if (this.returnType.flatTypes.length <= Callable.MAX_FLAT_RESULTS) {\n            const result = [];\n            this.returnType.lowerFlat(result, memory, value, context);\n            if (result.length !== this.returnType.flatTypes.length) {\n                throw new ComponentModelTrap(`Expected flat result of length ${this.returnType.flatTypes.length}, but got ${JSON.stringify(result, undefined, undefined)}`);\n            }\n            return result[0];\n        }\n        else {\n            const writer = out !== undefined ? memory.preAllocated(out, this.returnType.size) : this.returnType.alloc(memory);\n            this.returnType.store(writer, 0, value, context);\n            return;\n        }\n    }\n    callWasm(params, wasmFunction, context) {\n        const memory = context.getMemory();\n        const wasmValues = this.lowerParamValues(params, memory, context, undefined);\n        let resultRange = undefined;\n        let result;\n        if (this.returnType !== undefined && this.returnType.flatTypes.length > FunctionType.MAX_FLAT_RESULTS) {\n            resultRange = this.returnType.alloc(memory);\n            result = wasmFunction(...wasmValues, resultRange.ptr);\n        }\n        else {\n            result = wasmFunction(...wasmValues);\n        }\n        return this.liftReturnValue(result, resultRange?.ptr, memory, context);\n    }\n    getParamValuesForHostCall(params, context) {\n        const memory = context.getMemory();\n        const returnFlatTypes = this.returnType === undefined ? 0 : this.returnType.flatTypes.length;\n        // We currently only support 'lower' mode for results > MAX_FLAT_RESULTS.\n        let out;\n        if (returnFlatTypes > FunctionType.MAX_FLAT_RESULTS) {\n            const paramFlatTypes = this.paramType !== undefined ? this.paramType.flatTypes.length : 0;\n            // The caller allocated the memory. We just need to pass the pointer.\n            if (params.length === paramFlatTypes + 1) {\n                const last = params[paramFlatTypes];\n                if (typeof last !== 'number') {\n                    throw new ComponentModelTrap(`Result pointer must be a number (u32), but got ${out}.`);\n                }\n                out = last;\n            }\n        }\n        return [this.liftParamValues(params, memory, context), out];\n    }\n    liftReturnValue(value, out, memory, context) {\n        if (this.returnType === undefined) {\n            return;\n        }\n        else if (this.returnType.flatTypes.length <= Callable.MAX_FLAT_RESULTS) {\n            return this.returnType.liftFlat(memory, [value].values(), context);\n        }\n        else {\n            return this.returnType.load(memory.readonly(out, this.returnType.size), 0, context);\n        }\n    }\n}\nclass FunctionType extends Callable {\n    constructor(witName, params, returnType) {\n        super(witName, params, returnType);\n    }\n    callHost(func, params, context) {\n        const [jParams, out] = this.getParamValuesForHostCall(params, context);\n        const result = func(...jParams);\n        return this.lowerReturnValue(result, context.getMemory(), context, out);\n    }\n}\nexports.FunctionType = FunctionType;\nclass ConstructorType extends Callable {\n    constructor(witName, params, returnType) {\n        super(witName, params, returnType);\n    }\n    callHost(clazz, params, resourceManager, context) {\n        // We currently only support 'lower' mode for results > MAX_FLAT_RESULTS.\n        const returnFlatTypes = this.returnType === undefined ? 0 : this.returnType.flatTypes.length;\n        if (returnFlatTypes !== 1) {\n            throw new ComponentModelTrap(`Expected exactly one return type, but got ${returnFlatTypes}.`);\n        }\n        const memory = context.getMemory();\n        const jParams = this.liftParamValues(params, memory, context);\n        const obj = new clazz(...jParams);\n        const handle = resourceManager.$handle(obj);\n        return handle;\n    }\n}\nexports.ConstructorType = ConstructorType;\nclass DestructorType extends Callable {\n    constructor(witName, params) {\n        super(witName, params);\n    }\n    callHost(params, resourceManager) {\n        const handle = params[0];\n        if (typeof handle === 'bigint' || !$u32.valid(handle)) {\n            throw new ComponentModelTrap(`Object handle must be a number (u32), but got ${handle}.`);\n        }\n        const resource = resourceManager.$resource(handle);\n        resource['$drop'] !== undefined && resource['$drop']();\n        resourceManager.$drop(handle);\n    }\n}\nexports.DestructorType = DestructorType;\nclass StaticMethodType extends Callable {\n    constructor(witName, params, returnType) {\n        super(witName, params, returnType);\n    }\n    callHost(func, params, context) {\n        const [jParams, out] = this.getParamValuesForHostCall(params, context);\n        const result = func(...jParams);\n        return this.lowerReturnValue(result, context.getMemory(), context, out);\n    }\n}\nexports.StaticMethodType = StaticMethodType;\nclass MethodType extends Callable {\n    constructor(witName, params, returnType) {\n        super(witName, params, returnType);\n    }\n    callHost(methodName, params, resourceManager, context) {\n        if (params.length === 0) {\n            throw new ComponentModelTrap(`Method calls must have at least one parameter (the object pointer).`);\n        }\n        // We need to cut off the first parameter (the object handle).\n        const handle = params.shift();\n        if (typeof handle !== 'number') {\n            throw new ComponentModelTrap(`Object handle must be a number (u32), but got ${handle}.`);\n        }\n        const [jParams, out] = this.getParamValuesForHostCall(params, context);\n        const resource = resourceManager.$resource(handle);\n        const memory = context.getMemory();\n        const result = resource[methodName](...jParams);\n        return this.lowerReturnValue(result, memory, context, out);\n    }\n    callWasmMethod(params, wasmFunction, resourceManager, context) {\n        const memory = context.getMemory();\n        const obj = params.shift();\n        const handle = obj.$handle ?? resourceManager.$handle(obj);\n        const wasmValues = this.lowerParamValues(params, memory, context, undefined);\n        let resultRange = undefined;\n        let result;\n        if (this.returnType !== undefined && this.returnType.flatTypes.length > FunctionType.MAX_FLAT_RESULTS) {\n            resultRange = this.returnType.alloc(memory);\n            result = wasmFunction(handle, ...wasmValues, resultRange.ptr);\n        }\n        else {\n            result = wasmFunction(handle, ...wasmValues);\n        }\n        return this.liftReturnValue(result, resultRange?.ptr, memory, context);\n    }\n}\nexports.MethodType = MethodType;\nclass ResourceHandleType {\n    kind;\n    size;\n    alignment;\n    flatTypes;\n    witName;\n    constructor(witName) {\n        this.witName = witName;\n        this.kind = ComponentModelTypeKind.resourceHandle;\n        this.size = exports.u32.size;\n        this.alignment = exports.u32.alignment;\n        this.flatTypes = exports.u32.flatTypes;\n    }\n    load(memory, offset, context) {\n        return exports.u32.load(memory, offset, context);\n    }\n    liftFlat(memory, values, context) {\n        return exports.u32.liftFlat(memory, values, context);\n    }\n    alloc(memory) {\n        return exports.u32.alloc(memory);\n    }\n    store(memory, offset, value, context) {\n        exports.u32.store(memory, offset, value, context);\n    }\n    lowerFlat(result, memory, value, context) {\n        exports.u32.lowerFlat(result, memory, value, context);\n    }\n    copy(dest, dest_offset, src, src_offset, context) {\n        exports.u32.copy(dest, dest_offset, src, src_offset, context);\n    }\n}\nexports.ResourceHandleType = ResourceHandleType;\nclass ResourceType {\n    kind;\n    size;\n    alignment;\n    flatTypes;\n    witName;\n    id;\n    callables;\n    constructor(witName, id) {\n        this.kind = ComponentModelTypeKind.resource;\n        this.size = exports.u32.size;\n        this.alignment = exports.u32.alignment;\n        this.flatTypes = exports.u32.flatTypes;\n        this.witName = witName;\n        this.id = id;\n        this.callables = new Map();\n    }\n    addConstructor(jsName, func) {\n        this.callables.set(jsName, func);\n    }\n    addDestructor(jsName, func) {\n        this.callables.set(jsName, func);\n    }\n    addStaticMethod(jsName, func) {\n        this.callables.set(jsName, func);\n    }\n    addMethod(jsName, func) {\n        this.callables.set(jsName, func);\n    }\n    getCallable(jsName) {\n        const result = this.callables.get(jsName);\n        if (result === undefined) {\n            throw new ComponentModelTrap(`Method '${jsName}' not found on resource '${this.witName}'.`);\n        }\n        return result;\n    }\n    load(memory, offset, context) {\n        const handle = exports.u32.load(memory, offset, context);\n        return context.resources.get(this.id).$resource(handle);\n    }\n    liftFlat(memory, values, context) {\n        const handle = exports.u32.liftFlat(memory, values, context);\n        return context.resources.get(this.id).$resource(handle);\n    }\n    alloc(memory) {\n        return exports.u32.alloc(memory);\n    }\n    store(memory, offset, value, context) {\n        const handle = context.resources.get(this.id).$handle(value);\n        exports.u32.store(memory, offset, handle, context);\n    }\n    lowerFlat(result, memory, value, context) {\n        const handle = context.resources.get(this.id).$handle(value);\n        exports.u32.lowerFlat(result, memory, handle, context);\n    }\n    copy(dest, dest_offset, src, src_offset, context) {\n        exports.u32.copy(dest, dest_offset, src, src_offset, context);\n    }\n}\nexports.ResourceType = ResourceType;\nclass AbstractWrapperType {\n    kind;\n    size;\n    alignment;\n    flatTypes;\n    wrapped;\n    constructor(kind, wrapped) {\n        this.kind = kind;\n        this.wrapped = wrapped;\n        this.size = exports.u32.size;\n        this.alignment = exports.u32.alignment;\n        this.flatTypes = exports.u32.flatTypes;\n    }\n    load(memory, offset, context) {\n        return this.wrapped.load(memory, offset, context);\n    }\n    liftFlat(memory, values, context) {\n        return this.wrapped.liftFlat(memory, values, context);\n    }\n    alloc(memory) {\n        return exports.u32.alloc(memory);\n    }\n    store(memory, offset, value, context) {\n        return this.wrapped.store(memory, offset, value, context);\n    }\n    lowerFlat(result, memory, value, context) {\n        return this.wrapped.lowerFlat(result, memory, value, context);\n    }\n    copy(dest, dest_offset, src, src_offset, context) {\n        return this.wrapped.copy(dest, dest_offset, src, src_offset, context);\n    }\n}\nclass BorrowType extends AbstractWrapperType {\n    constructor(type) {\n        super(ComponentModelTypeKind.borrow, type);\n    }\n}\nexports.BorrowType = BorrowType;\nclass OwnType extends AbstractWrapperType {\n    constructor(type) {\n        super(ComponentModelTypeKind.own, type);\n    }\n}\nexports.OwnType = OwnType;\nvar ComponentModelTypeVisitor;\n(function (ComponentModelTypeVisitor) {\n    function visit(type, visitor) {\n        switch (type.kind) {\n            case ComponentModelTypeKind.u8:\n                visitor.visitU8 !== undefined && visitor.visitU8(type);\n                break;\n            case ComponentModelTypeKind.u16:\n                visitor.visitU16 !== undefined && visitor.visitU16(type);\n                break;\n            case ComponentModelTypeKind.u32:\n                visitor.visitU32 !== undefined && visitor.visitU32(type);\n                break;\n            case ComponentModelTypeKind.u64:\n                visitor.visitU64 !== undefined && visitor.visitU64(type);\n                break;\n            case ComponentModelTypeKind.s8:\n                visitor.visitS8 !== undefined && visitor.visitS8(type);\n                break;\n            case ComponentModelTypeKind.s16:\n                visitor.visitS16 !== undefined && visitor.visitS16(type);\n                break;\n            case ComponentModelTypeKind.s32:\n                visitor.visitS32 !== undefined && visitor.visitS32(type);\n                break;\n            case ComponentModelTypeKind.s64:\n                visitor.visitS64 !== undefined && visitor.visitS64(type);\n                break;\n            case ComponentModelTypeKind.float32:\n                visitor.visitFloat32 !== undefined && visitor.visitFloat32(type);\n                break;\n            case ComponentModelTypeKind.float64:\n                visitor.visitFloat64 !== undefined && visitor.visitFloat64(type);\n                break;\n            case ComponentModelTypeKind.bool:\n                visitor.visitBool !== undefined && visitor.visitBool(type);\n                break;\n            case ComponentModelTypeKind.string:\n                visitor.visitString !== undefined && visitor.visitString(type);\n                break;\n            case ComponentModelTypeKind.enum:\n                visitor.visitEnum !== undefined && visitor.visitEnum(type);\n                break;\n            case ComponentModelTypeKind.flags:\n                visitor.visitFlags !== undefined && visitor.visitFlags(type);\n                break;\n            case ComponentModelTypeKind.borrow:\n                visitor.visitBorrow !== undefined && visitor.visitBorrow(type);\n                break;\n            case ComponentModelTypeKind.own:\n                visitor.visitOwn !== undefined && visitor.visitOwn(type);\n                break;\n            case ComponentModelTypeKind.resource:\n                visitor.visitResource !== undefined && visitor.visitResource(type);\n                break;\n            case ComponentModelTypeKind.resourceHandle:\n                visitor.visitResourceHandle !== undefined && visitor.visitResourceHandle(type);\n                break;\n            case ComponentModelTypeKind.list:\n                if (visitor.visitList !== undefined && visitor.visitList(type)) {\n                    visit(type.elementType, visitor);\n                }\n                visitor.endVisitList !== undefined && visitor.endVisitList(type);\n                break;\n            case ComponentModelTypeKind.record:\n                if ((visitor.visitRecord !== undefined && visitor.visitRecord(type) || visitor.visitRecord === undefined)) {\n                    for (const field of type.fields) {\n                        visit(field.type, visitor);\n                    }\n                }\n                visitor.endVisitRecord !== undefined && visitor.endVisitRecord(type);\n                break;\n            case ComponentModelTypeKind.tuple:\n                if ((visitor.visitTuple !== undefined && visitor.visitTuple(type) || visitor.visitTuple === undefined)) {\n                    for (const field of type.fields) {\n                        visit(field.type, visitor);\n                    }\n                }\n                visitor.endVisitTuple !== undefined && visitor.endVisitTuple(type);\n                break;\n            case ComponentModelTypeKind.variant:\n                if ((visitor.visitVariant !== undefined && visitor.visitVariant(type) || visitor.visitVariant === undefined)) {\n                    for (const field of type.cases) {\n                        field.type !== undefined && visit(field.type, visitor);\n                    }\n                }\n                visitor.endVisitVariant !== undefined && visitor.endVisitVariant(type);\n                break;\n            case ComponentModelTypeKind.option:\n                if ((visitor.visitOption !== undefined && visitor.visitOption(type) || visitor.visitOption === undefined)) {\n                    visit(type.valueType, visitor);\n                }\n                visitor.endVisitOption !== undefined && visitor.endVisitOption(type);\n                break;\n            case ComponentModelTypeKind.result:\n                if ((visitor.visitResult !== undefined && visitor.visitResult(type) || visitor.visitResult === undefined)) {\n                    for (const field of type.cases) {\n                        field.type !== undefined && visit(field.type, visitor);\n                    }\n                }\n                visitor.endVisitResult !== undefined && visitor.endVisitResult(type);\n                break;\n            default:\n                throw new Error(`Unknown type kind ${type.kind}`);\n        }\n    }\n    ComponentModelTypeVisitor.visit = visit;\n})(ComponentModelTypeVisitor || (exports.ComponentModelTypeVisitor = ComponentModelTypeVisitor = {}));\nvar InterfaceType;\n(function (InterfaceType) {\n    function is(value) {\n        return typeof value === 'object' && typeof value.id === 'string' && typeof value.witName === 'string'\n            && value.types instanceof Map && value.functions instanceof Map && value.resources instanceof Map;\n    }\n    InterfaceType.is = is;\n})(InterfaceType || (exports.InterfaceType = InterfaceType = {}));\nvar PackageType;\n(function (PackageType) {\n    function is(value) {\n        return typeof value === 'object' && typeof value.id === 'string' && typeof value.witName === 'string'\n            && value.interfaces instanceof Map;\n    }\n    PackageType.is = is;\n})(PackageType || (exports.PackageType = PackageType = {}));\nvar WasmContext;\n(function (WasmContext) {\n    class Default {\n        memory;\n        options;\n        resources;\n        constructor() {\n            this.options = { encoding: 'utf-8' };\n            this.resources = new ResourceManagers.Default();\n        }\n        initialize(memory) {\n            if (this.memory !== undefined) {\n                throw new MemoryError(`Memory is already initialized.`);\n            }\n            this.memory = memory;\n        }\n        getMemory() {\n            if (this.memory === undefined) {\n                throw new MemoryError(`Memory not yet initialized.`);\n            }\n            return this.memory;\n        }\n    }\n    WasmContext.Default = Default;\n})(WasmContext || (exports.WasmContext = WasmContext = {}));\nclass Resource {\n    _handle;\n    constructor() {\n        this._handle = undefined;\n    }\n    get $handle() {\n        return this._handle;\n    }\n    set $handle(value) {\n        if (value === undefined) {\n            throw new ComponentModelTrap('Cannot set undefined handle');\n        }\n        if (this._handle !== undefined) {\n            throw new ComponentModelTrap(`Cannot set handle twice. Current handle is ${this._handle} new handle is ${value}.`);\n        }\n        this._handle = value;\n    }\n}\nexports.Resource = Resource;\nvar Imports;\n(function (Imports) {\n    function create(functions, resources, service, context) {\n        const result = Object.create(null);\n        if (functions !== undefined) {\n            for (const [funcName, func] of functions) {\n                result[func.witName] = createFunction(func, service[funcName], context);\n            }\n        }\n        if (resources !== undefined) {\n            for (const [resourceName, resource] of resources) {\n                const clazz = service[resourceName];\n                let resourceManager;\n                if (context.resources.has(resource.id)) {\n                    resourceManager = context.resources.get(resource.id);\n                }\n                else {\n                    resourceManager = ResourceManager.from(clazz) ?? new ResourceManager.Default();\n                    context.resources.set(resource.id, resourceManager);\n                }\n                for (const [callableName, callable] of resource.callables) {\n                    if (callable instanceof ConstructorType) {\n                        result[callable.witName] = createConstructorFunction(callable, clazz, resourceManager, context);\n                    }\n                    else if (callable instanceof StaticMethodType) {\n                        result[callable.witName] = createStaticMethodFunction(callable, service[resourceName][callableName], context);\n                    }\n                    else if (callable instanceof MethodType) {\n                        result[callable.witName] = createMethodFunction(callableName, callable, resourceManager, context);\n                    }\n                    else if (callable instanceof DestructorType) {\n                        result[callable.witName] = createDestructorFunction(callable, resourceManager);\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    Imports.create = create;\n    function createFunction(callable, serviceFunction, context) {\n        return function (...params) {\n            return callable.callHost(serviceFunction, params, context);\n        };\n    }\n    function createConstructorFunction(callable, clazz, manager, context) {\n        return function (...params) {\n            return callable.callHost(clazz, params, manager, context);\n        };\n    }\n    function createDestructorFunction(callable, manager) {\n        return function (...params) {\n            return callable.callHost(params, manager);\n        };\n    }\n    function createStaticMethodFunction(callable, func, context) {\n        return function (...params) {\n            return callable.callHost(func, params, context);\n        };\n    }\n    function createMethodFunction(name, callable, manager, context) {\n        return function (...params) {\n            return callable.callHost(name, params, manager, context);\n        };\n    }\n})(Imports || (exports.Imports = Imports = {}));\nvar Module;\n(function (Module) {\n    function createObjectModule(resource, wasm, context) {\n        let resourceManager;\n        if (context.resources.has(resource.id)) {\n            resourceManager = context.resources.get(resource.id);\n        }\n        else {\n            resourceManager = new ResourceManager.Default();\n            context.resources.set(resource.id, resourceManager);\n        }\n        const result = Object.create(null);\n        for (const [name, callable] of resource.callables) {\n            if (callable instanceof ConstructorType) {\n                result[name] = createConstructorFunction(callable, wasm[callable.witName], context);\n            }\n            else if (callable instanceof MethodType) {\n                result[name] = createMethodFunction(callable, wasm[callable.witName], resourceManager, context);\n            }\n            else if (callable instanceof DestructorType) {\n                result[name] = createDestructorFunction(callable, wasm[callable.witName], context);\n            }\n        }\n        return result;\n    }\n    Module.createObjectModule = createObjectModule;\n    function createClassModule(resource, wasm, context) {\n        if (!context.resources.has(resource.id)) {\n            context.resources.set(resource.id, new ResourceManager.Default());\n        }\n        const result = Object.create(null);\n        for (const [name, callable] of resource.callables) {\n            if (callable instanceof StaticMethodType) {\n                result[name] = createStaticMethodFunction(callable, wasm[callable.witName], context);\n            }\n        }\n        return result;\n    }\n    Module.createClassModule = createClassModule;\n    function createConstructorFunction(callable, wasmFunction, context) {\n        return (...params) => {\n            return callable.callWasm(params, wasmFunction, context);\n        };\n    }\n    function createDestructorFunction(callable, wasmFunction, context) {\n        return (...params) => {\n            return callable.callWasm(params, wasmFunction, context);\n        };\n    }\n    function createStaticMethodFunction(callable, wasmFunction, context) {\n        return (...params) => {\n            return callable.callWasm(params, wasmFunction, context);\n        };\n    }\n    function createMethodFunction(callable, wasmFunction, manager, context) {\n        return (...params) => {\n            return callable.callWasmMethod(params, wasmFunction, manager, context);\n        };\n    }\n})(Module || (exports.Module = Module = {}));\nvar Exports;\n(function (Exports) {\n    function filter(exports, functions, resources, id, version, _context) {\n        const key = version !== undefined ? `${id}@${version}` : id;\n        let result = exports[key];\n        // We could actually check if all properties exist in the result.\n        if (result !== null && typeof result === 'object') {\n            return result;\n        }\n        result = Object.create(null);\n        if (functions !== undefined) {\n            for (const func of functions.values()) {\n                const funcKey = `${key}#${func.witName}`;\n                const candidate = exports[funcKey];\n                if (candidate !== null && candidate !== undefined) {\n                    result[func.witName] = candidate;\n                }\n            }\n        }\n        if (resources !== undefined) {\n            for (const resource of resources.values()) {\n                for (const callable of resource.callables.values()) {\n                    const callableKey = `${key}#${callable.witName}`;\n                    const candidate = exports[callableKey];\n                    if (candidate !== null && candidate !== undefined) {\n                        result[callable.witName] = candidate;\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    Exports.filter = filter;\n    function bind(functions, resources, wasm, context) {\n        const result = Object.create(null);\n        if (functions !== undefined) {\n            for (const [name, func] of functions) {\n                result[name] = createFunction(func, wasm[func.witName], context);\n            }\n        }\n        if (resources !== undefined) {\n            for (const [name, , factory] of resources) {\n                result[name] = factory(wasm, context);\n            }\n        }\n        return result;\n    }\n    Exports.bind = bind;\n    function createFunction(func, wasmFunction, context) {\n        return (...params) => {\n            return func.callWasm(params, wasmFunction, context);\n        };\n    }\n})(Exports || (exports.Exports = Exports = {}));\n", "\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RAL = void 0;\nconst ral_1 = __importDefault(require(\"./ral\"));\nexports.RAL = ral_1.default;\n__exportStar(require(\"./componentModel\"), exports);\n", "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nconst ril_1 = __importDefault(require(\"./ril\"));\nril_1.default.install();\n__exportStar(require(\"../common/api\"), exports);\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as vscode from 'vscode';\nimport { WasmContext, Memory } from '@vscode/wasm-component-model';\n\nimport { example } from './example';\nimport calculator = example.calculator;\nimport Types = example.Types;\n\nexport async function activate(context: vscode.ExtensionContext): Promise<void> {\n\t// The channel for printing the result.\n\tconst channel = vscode.window.createOutputChannel('Calculator');\n\tcontext.subscriptions.push(channel);\n\n\t// The channel for printing the log.\n\tconst log = vscode.window.createOutputChannel('Calculator - Log', { log: true });\n\tcontext.subscriptions.push(log);\n\n\t// Load the Wasm module\n\tconst filename = vscode.Uri.joinPath(context.extensionUri, 'target', 'wasm32-unknown-unknown', 'debug', 'calculator.wasm');\n\tconst bits = await vscode.workspace.fs.readFile(filename);\n\tconst module = await WebAssembly.compile(bits);\n\n\t// The implementation of the log function that is called from WASM\n\tconst service: calculator.Imports = {\n\t\tlog: (msg: string) => {\n\t\t\tlog.info(msg);\n\t\t}\n\t}\n\n\t// The context for the WASM module\n\tconst wasmContext: WasmContext.Default = new WasmContext.Default();\n\n\t// Instantiate the module and create the necessary imports from the service implementation\n\tconst instance = await WebAssembly.instantiate(module, calculator._.createImports(service, wasmContext));\n\t// Bind the WASM memory to the context\n\twasmContext.initialize(new Memory.Default(instance.exports));\n\n\t// Bind the JavaScript Api\n\tconst api = calculator._.bindExports(instance.exports as calculator._.Exports, wasmContext);\n\n\tcontext.subscriptions.push(vscode.commands.registerCommand('vscode-samples.wasm-component-model.run', () => {\n\t\tchannel.show();\n\t\tchannel.appendLine('Running calculator example');\n\t\tchannel.appendLine(`Add ${api.calc(Types.Operation.Add({ left: 1, right: 2}))}`);\n\t\tchannel.appendLine(`Sub ${api.calc(Types.Operation.Sub({ left: 10, right: 8 }))}`);\n\t\tchannel.appendLine(`Mul ${api.calc(Types.Operation.Mul({ left: 3, right: 7 }))}`);\n\t\tchannel.appendLine(`Div ${api.calc(Types.Operation.Div({ left: 10, right: 2 }))}`);\n\t}));\n}", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as $wcm from '@vscode/wasm-component-model';\nimport type { u32, i32 } from '@vscode/wasm-component-model';\n\nexport namespace example {\n\texport namespace Types {\n\t\texport type Operands = {\n\t\t\tleft: u32;\n\t\t\tright: u32;\n\t\t};\n\n\t\texport namespace Operation {\n\t\t\texport const add = 'add' as const;\n\t\t\texport type Add = { readonly tag: typeof add; readonly value: Operands } & _common;\n\t\t\texport function Add(value: Operands): Add {\n\t\t\t\treturn new VariantImpl(add, value) as Add;\n\t\t\t}\n\n\t\t\texport const sub = 'sub' as const;\n\t\t\texport type Sub = { readonly tag: typeof sub; readonly value: Operands } & _common;\n\t\t\texport function Sub(value: Operands): Sub {\n\t\t\t\treturn new VariantImpl(sub, value) as Sub;\n\t\t\t}\n\n\t\t\texport const mul = 'mul' as const;\n\t\t\texport type Mul = { readonly tag: typeof mul; readonly value: Operands } & _common;\n\t\t\texport function Mul(value: Operands): Mul {\n\t\t\t\treturn new VariantImpl(mul, value) as Mul;\n\t\t\t}\n\n\t\t\texport const div = 'div' as const;\n\t\t\texport type Div = { readonly tag: typeof div; readonly value: Operands } & _common;\n\t\t\texport function Div(value: Operands): Div {\n\t\t\t\treturn new VariantImpl(div, value) as Div;\n\t\t\t}\n\n\t\t\texport type _tt = typeof add | typeof sub | typeof mul | typeof div;\n\t\t\texport type _vt = Operands | Operands | Operands | Operands;\n\t\t\ttype _common = Omit<VariantImpl, 'tag' | 'value'>;\n\t\t\texport function _ctor(t: _tt, v: _vt): Operation {\n\t\t\t\treturn new VariantImpl(t, v) as Operation;\n\t\t\t}\n\t\t\tclass VariantImpl {\n\t\t\t\tprivate readonly _tag: _tt;\n\t\t\t\tprivate readonly _value: _vt;\n\t\t\t\tconstructor(t: _tt, value: _vt) {\n\t\t\t\t\tthis._tag = t;\n\t\t\t\t\tthis._value = value;\n\t\t\t\t}\n\t\t\t\tget tag(): _tt {\n\t\t\t\t\treturn this._tag;\n\t\t\t\t}\n\t\t\t\tget value(): _vt {\n\t\t\t\t\treturn this._value;\n\t\t\t\t}\n\t\t\t\tisAdd(): this is Add {\n\t\t\t\t\treturn this._tag === Operation.add;\n\t\t\t\t}\n\t\t\t\tisSub(): this is Sub {\n\t\t\t\t\treturn this._tag === Operation.sub;\n\t\t\t\t}\n\t\t\t\tisMul(): this is Mul {\n\t\t\t\t\treturn this._tag === Operation.mul;\n\t\t\t\t}\n\t\t\t\tisDiv(): this is Div {\n\t\t\t\t\treturn this._tag === Operation.div;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\texport type Operation = Operation.Add | Operation.Sub | Operation.Mul | Operation.Div;\n\t}\n\texport type Types = {\n\t};\n\texport namespace calculator {\n\t\texport type Operation = Types.Operation;\n\t\texport type Imports = {\n\t\t\tlog: (msg: string) => void;\n\t\t};\n\t\texport type Exports = {\n\t\t\tcalc: (o: Operation) => u32;\n\t\t};\n\t}\n}\n\nexport namespace example {\n\texport namespace Types.$ {\n\t\texport const Operands = new $wcm.RecordType<example.Types.Operands>([\n\t\t\t['left', $wcm.u32],\n\t\t\t['right', $wcm.u32],\n\t\t]);\n\t\texport const Operation = new $wcm.VariantType<example.Types.Operation, example.Types.Operation._tt, example.Types.Operation._vt>([['add', Operands], ['sub', Operands], ['mul', Operands], ['div', Operands]], example.Types.Operation._ctor);\n\t}\n\texport namespace Types._ {\n\t\texport const id = 'vscode:example/types' as const;\n\t\texport const witName = 'types' as const;\n\t\texport const types: Map<string, $wcm.GenericComponentModelType> = new Map<string, $wcm.GenericComponentModelType>([\n\t\t\t['Operands', $.Operands],\n\t\t\t['Operation', $.Operation]\n\t\t]);\n\t}\n\texport namespace calculator.$ {\n\t\texport const Operation = Types.$.Operation;\n\t\texport namespace Imports {\n\t\t\texport const log = new $wcm.FunctionType<calculator.Imports['log']>('log',[\n\t\t\t\t['msg', $wcm.wstring],\n\t\t\t], undefined);\n\t\t}\n\t\texport namespace Exports {\n\t\t\texport const calc = new $wcm.FunctionType<calculator.Exports['calc']>('calc',[\n\t\t\t\t['o', Operation],\n\t\t\t], $wcm.u32);\n\t\t}\n\t}\n\texport namespace calculator._ {\n\t\texport const id = 'vscode:example/calculator' as const;\n\t\texport const witName = 'calculator' as const;\n\t\texport type $Root = {\n\t\t\t'log': (msg_ptr: i32, msg_len: i32) => void;\n\t\t}\n\t\texport namespace Imports {\n\t\t\texport const functions: Map<string, $wcm.FunctionType> = new Map([\n\t\t\t\t['log', $.Imports.log]\n\t\t\t]);\n\t\t\texport const interfaces: Map<string, $wcm.InterfaceType> = new Map<string, $wcm.InterfaceType>([\n\t\t\t\t['Types', Types._]\n\t\t\t]);\n\t\t}\n\t\texport type Imports = {\n\t\t\t'$root': $Root;\n\t\t};\n\t\texport namespace Exports {\n\t\t\texport const functions: Map<string, $wcm.FunctionType> = new Map([\n\t\t\t\t['calc', $.Exports.calc]\n\t\t\t]);\n\t\t}\n\t\texport type Exports = {\n\t\t\t'calc': (o_Operation_case: i32, o_Operation_0: i32, o_Operation_1: i32) => i32;\n\t\t};\n\t\texport function createImports(service: calculator.Imports, context: $wcm.WasmContext): Imports {\n\t\t\tconst result: Imports = Object.create(null);\n\t\t\tresult['$root'] = $wcm.Imports.create<$Root>(Imports.functions, undefined, service, context);\n\t\t\treturn result;\n\t\t}\n\t\texport function bindExports(exports: Exports, context: $wcm.WasmContext): calculator.Exports {\n\t\t\tconst result: calculator.Exports = Object.create(null);\n\t\t\tObject.assign(result, $wcm.Exports.bind(Exports.functions, undefined, exports, context));\n\t\t\treturn result;\n\t\t}\n\t}\n}\n\nexport namespace example._ {\n\texport const id = 'vscode:example' as const;\n\texport const witName = 'example' as const;\n\texport const interfaces: Map<string, $wcm.InterfaceType> = new Map<string, $wcm.InterfaceType>([\n\t\t['Types', Types._]\n\t]);\n\texport const worlds: Map<string, $wcm.WorldType> = new Map<string, $wcm.WorldType>([\n\t\t['calculator', calculator._]\n\t]);\n}"],
  "mappings": "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",
  "names": ["exports", "RAL", "exports", "RIL", "crypto", "version", "crypto", "import_crypto", "import_crypto", "crypto", "crypto", "import_crypto", "exports", "result", "ResourceManager", "ResourceManagers", "BigInts", "Alignment", "align", "Memory", "FlatTypeKind", "$i32", "$i64", "$f32", "$f64", "WasmTypes", "ComponentModelTypeKind", "$u8", "$u16", "$u32", "$u64", "$s8", "$s16", "$s32", "$s64", "$float32", "$float64", "$wchar", "$wstring", "RecordField", "RecordType", "TupleField", "VariantCase", "VariantType", "option", "Error", "FunctionType", "ComponentModelTypeVisitor", "InterfaceType", "PackageType", "WasmContext", "Imports", "Module", "Exports", "version", "exports", "exports", "example", "Types", "Operation", "$", "_", "calculator", "Imports", "Exports", "exports", "module"]
}
